%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
%	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 1) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.37 (In this paper we examine the problem of extending modern) 54 614.33 P
0.62 0.13 (operating systems to run efficiently on large-scale shared) 54 602.33 B
-0.05 (memory multiprocessors without a large implementation ef-) 54 590.33 P
-0.08 (fort. Our approach brings back an idea popular in the 1970s,) 54 578.33 P
0.62 0.09 (virtual machine monitors. We use virtual machines to run) 54 566.33 B
0.47 (multiple commodity operating systems on a scalable multi-) 54 554.33 P
0.62 0.08 (processor. This solution addresses many of the challenges) 54 542.33 B
0.49 (facing the system software for these machines. We demon-) 54 530.33 P
0.62 0.07 (strate our approach with a prototype called Disco that can) 54 518.33 B
-0.32 (run multiple copies of Silicon Graphics\325 IRIX operating sys-) 54 506.33 P
0.62 0.24 (tem on a multiprocessor. Our experience shows that the) 54 494.33 B
0.62 0.13 (overheads of the monitor are small and that the approach) 54 482.33 B
0.62 0.12 (provides scalability as well as the ability to deal with the) 54 470.33 B
0.62 0.05 (non-uniform memory access time of these systems. To re-) 54 458.33 B
0.47 (duce the memory overheads associated with running multi-) 54 446.33 P
-0.04 (ple operating systems, we have developed techniques where) 54 434.33 P
0.62 0.11 (the virtual machines transparently share major data struc-) 54 422.33 B
0.62 0.1 (tures such as the program code and the file system buffer) 54 410.33 B
0.03 (cache. We use the distributed system support of modern op-) 54 398.33 P
-0.37 (erating systems to export a partial single system image to the) 54 386.33 P
0.52 (users. The overall solution achieves most of the benefits of) 54 374.33 P
0.62 0.04 (operating systems customized for scalable multiprocessors) 54 362.33 B
-0.43 (yet it can be achieved with a significantly smaller implemen-) 54 350.33 P
(tation effort.) 54 338.33 T
2 14 Q
(1) 54 309.42 T
(Intr) 72 309.42 T
(oduction) 95.86 309.42 T
1 10 Q
-0.12 (Scalable computers have moved from the research lab to the) 54 289.08 P
0.62 0.15 (marketplace. Multiple vendors are now shipping scalable) 54 277.08 B
0.24 (systems with configurations in the tens or even hundreds of) 54 265.08 P
-0.4 (processors. Unfortunately, the system software for these ma-) 54 253.08 P
-0.03 (chines has often trailed hardware in reaching the functional-) 54 241.08 P
(ity and reliability expected by modern computer users.) 54 229.08 T
0.62 0.23 (Operating systems developers shoulder much of the) 72 217.08 B
0.62 0.08 (blame for the inability to deliver on the promises of these) 54 205.08 B
0.62 0.02 (machines. Extensive modifications to the operating system) 54 193.08 B
0.62 0.1 (are required to efficiently support scalable machines. The) 54 181.08 B
-0.45 (size and complexity of modern operating systems have made) 54 169.08 P
(these modifications a resource-intensive undertaking.) 54 157.08 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.62 0.18 (In this paper, we present an alternative approach for) 335.78 614.33 B
0.36 (constructing the system software for these large computers.) 317.78 602.33 P
0.23 (Rather than making extensive changes to existing operating) 317.78 590.33 P
0.62 0.03 (systems, we insert an additional layer of software between) 317.78 578.33 B
-0.39 (the hardware and operating system. This layer acts like a vir-) 317.78 566.33 P
-0.6 (tual machine monitor in that multiple copies of \322commodity\323) 317.78 554.33 P
0.09 (operating systems can be run on a single scalable computer.) 317.78 542.33 P
-0.32 (The monitor also allows these commodity operating systems) 317.78 530.33 P
0 (to efficiently cooperate and share resources with each other.) 317.78 518.33 P
-0.31 (The resulting system contains most of the features of custom) 317.78 506.33 P
0.62 0.01 (scalable operating systems developed specifically for these) 317.78 494.33 B
0.62 0.03 (machines at only a fraction of their complexity and imple-) 317.78 482.33 B
0.62 0.14 (mentation cost. The use of commodity operating systems) 317.78 470.33 B
0.62 0.01 (leads to systems that are both reliable and compatible with) 317.78 458.33 B
(the existing computing base.) 317.78 446.33 T
0.62 0.16 (To demonstrate the approach, we have constructed a) 335.78 434.33 B
0.62 0.3 (prototype system targeting the Stanford FLASH shared) 317.78 422.33 B
0.56 (memory multiprocessor [17], an experimental cache coher-) 317.78 410.33 P
0.39 (ent non-uniform memory architecture \050ccNUMA\051 machine.) 317.78 398.33 P
-0.42 (The prototype, called Disco, combines commodity operating) 317.78 386.33 P
0.62 0.03 (systems not originally designed for such large-scale multi-) 317.78 374.33 B
-0.77 (processors to form a high performance system software base.) 317.78 362.33 P
0.62 0.05 (Disco contains many features that reduce or eliminate) 335.78 350.33 B
0.62 0.22 (the problems associated with traditional virtual machine) 317.78 338.33 B
0.55 (monitors. Specifically, it minimizes the overhead of virtual) 317.78 326.33 P
-0.16 (machines and enhances the resource sharing between virtual) 317.78 314.33 P
0.09 (machines running on the same system. Disco allows the op-) 317.78 302.33 P
0.52 (erating systems running on different virtual machines to be) 317.78 290.33 P
-0.4 (coupled using standard distributed systems protocols such as) 317.78 278.33 P
-0.45 (NFS and TCP/IP. It also allows for efficient sharing of mem-) 317.78 266.33 P
0.35 (ory and disk resources between virtual machines. The shar-) 317.78 254.33 P
0.62 0.01 (ing support allows Disco to maintain a global buffer cache) 317.78 242.33 B
0.35 (transparently shared by all the virtual machines, even when) 317.78 230.33 P
0.23 (the virtual machines communicate through standard distrib-) 317.78 218.33 P
(uted protocols.) 317.78 206.33 T
0.44 (Our experiments with realistic workloads on a detailed) 335.78 194.33 P
0.31 (simulator of the FLASH machine show that Disco achieves) 317.78 182.33 P
0.62 0.16 (its goals. With a few simple modifications to an existing) 317.78 170.33 B
0.04 (commercial operating system, the basic overhead of virtual-) 317.78 158.33 P
0.62 0.05 (ization is at most 16% for all our uniprocessor workloads.) 317.78 146.33 B
0.41 (We show that a system with eight virtual machines can run) 317.78 134.33 P
-0.52 (some workloads 40% faster than on a commercial symmetric) 317.78 122.33 P
0.04 (multiprocessor operating system by increasing the scalabili-) 317.78 110.33 P
0.62 0.05 (ty of the system software, without substantially increasing) 317.78 98.33 B
0.58 (the system\325s memory footprint. Finally, we show that page) 317.78 86.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
54 630 558 738 R
7 X
V
2 14 Q
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 78.43 728.67 T
(ocessors) 484.58 728.67 T
1 12 Q
(Edouard Bugnion, Scott Devine, and Mendel Rosenblum) 169.01 709 T
1 10 Q
(Computer Systems Laboratory) 244.62 685 T
(Stanford University) 265.49 673 T
(,) 344.01 673 T
(Stanford, CA 94305) 265.58 661 T
({bugnion, devine, mendel}@cs.stanford.edu) 216.88 649 T
(http://www-\337ash.stanford.edu/Disco) 232.95 637 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
54 81 297 126 R
7 X
V
0 X
(SOSP 16.) 54 107.33 T
(\050c\051 ACM 1997.) 54 95.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 2) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.62 0.05 (placement and dynamic page migration and replication al-) 54 731.33 B
0.62 0.03 (low Disco to hide the NUMA-ness of the memory system,) 54 719.33 B
(improving the execution time by up to 37%.) 54 707.33 T
-0.27 (In Section) 72 695.33 P
-0.27 (2, we provide a more detailed presentation of) 115.06 695.33 P
0.62 0.06 (the problem being addressed. Section) 54 683.33 B
0.62 0.06 (3 describes an over-) 210.95 683.33 B
-0.19 (view of the approach and the challenges of using virtual ma-) 54 671.33 P
0.62 0.35 (chines to construct the system software for large-scale) 54 659.33 B
0.62 0.01 (shared-memory multiprocessors. Section) 54 647.33 B
0.62 0.01 (4 presents the de-) 221.86 647.33 B
0.62 (sign and implementation of Disco and Section) 54 635.33 P
0.62 (5 shows ex-) 245.21 635.33 P
0.62 0.1 (perimental results. We end the paper with a discussion of) 54 623.33 B
(related work in Section) 54 611.33 T
(6 and conclude in Section) 149.54 611.33 T
(7.) 255.36 611.33 T
2 14 Q
(2) 54 582.42 T
(Pr) 72 582.42 T
(oblem Description) 86.52 582.42 T
1 10 Q
-0.59 (This paper addresses the problems seen by computer vendors) 54 562.08 P
0.62 0.05 (attempting to provide system software for their innovative) 54 550.08 B
0.62 0.22 (hardware. For the purposes of this paper, the innovative) 54 538.08 B
-0.52 (hardware is scalable shared memory multiprocessors, but the) 54 526.08 P
0.38 (issues are similar for any hardware innovation that requires) 54 514.08 P
-0.28 (significant changes in the system software. For shared mem-) 54 502.08 P
0.62 0.23 (ory multiprocessors, research groups have demonstrated) 54 490.08 B
0.03 (prototype operating systems such as Hive [5] and Hurricane) 54 478.08 P
0.19 ([25] that address the challenges of scalability and fault con-) 54 466.08 P
-0.12 (tainment. Silicon Graphics has announced the Cellular IRIX) 54 454.08 P
0.62 0.81 (kernel to support its shared memory machine, the) 54 442.08 B
0.62 0.37 (Origin2000) 54 430.08 B
0.62 0.37 ([18]. These designs require significant OS) 106.68 430.08 B
0.62 0.26 (changes, including partitioning the system into scalable) 54 418.08 B
-0.53 (units, building a single system image across the units, as well) 54 406.08 P
-0.31 (as other features such as fault containment [5] and ccNUMA) 54 394.08 P
(management [26].) 54 382.08 T
0.62 0.02 (With the size of the system software for modern com-) 72 370.08 B
-0.38 (puters in the millions of lines of code, the changes for ccNU-) 54 358.08 P
0.62 0.27 (MA machines represent a significant development cost.) 54 346.08 B
-0.42 (These changes have an impact on many of the standard mod-) 54 334.08 P
0.11 (ules that make up a modern system, such as virtual memory) 54 322.08 P
0.06 (management and the scheduler. As a result, the system soft-) 54 310.08 P
0.32 (ware for these machines is generally delivered significantly) 54 298.08 P
-0.52 (later than the hardware. Even when the changes are function-) 54 286.08 P
0.4 (ally complete, they are likely to introduce instabilities for a) 54 274.08 P
(certain period of time.) 54 262.08 T
0.62 0.19 (Late, incompatible, and possibly even buggy system) 72 250.08 B
0.62 0.1 (software can significantly impact the success of such ma-) 54 238.08 B
-0.12 (chines, regardless of the innovations in the hardware. As the) 54 226.08 P
0.62 0.13 (computer industry matures, users expect to carry forward) 54 214.08 B
0.62 0.08 (their large base of existing application programs. Further-) 54 202.08 B
-0.34 (more, with the increasing role that computers play in today\325s) 54 190.08 P
0.62 0.07 (society, users are demanding highly reliable and available) 54 178.08 B
-0.35 (computing systems. The cost of achieving reliability in com-) 54 166.08 P
-0.47 (puters may even dwarf the benefits of the innovation in hard-) 54 154.08 P
(ware for many application areas.) 54 142.08 T
0.38 (Computer hardware vendors that use \322commodity\323 op-) 72 130.08 P
-0.49 (erating systems such as Microsoft\325s Windows NT [9] face an) 54 118.08 P
0.23 (even greater problem in obtaining operating system support) 54 106.08 P
0.62 0.02 (for their ccNUMA multiprocessors. These vendors need to) 54 94.08 B
0.62 0.06 (persuade an independent company to make changes to the) 54 82.08 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.62 0.2 (operating system to support the new hardware. Not only) 317.78 731.33 B
-0.31 (must these vendors deliver on the promises of the innovative) 317.78 719.33 P
0.44 (hardware, they must also convince powerful software com-) 317.78 707.33 P
0.53 (panies that running on their hardware is worth the effort of) 317.78 695.33 P
(the port [20].) 317.78 683.33 T
-0.31 (Given this situation, it is no small wonder that computer) 335.78 671.33 P
0.4 (architects frequently complain about the constraints and in-) 317.78 659.33 P
0.23 (flexibility of system software. From their perspective, these) 317.78 647.33 P
-0.28 (software constraints are an impediment to innovation. To re-) 317.78 635.33 P
0.17 (duce the gap between hardware innovations and the adapta-) 317.78 623.33 P
0.62 0.06 (tion of system software, system developers must find new) 317.78 611.33 B
-0.06 (ways to develop their software more quickly and with fewer) 317.78 599.33 P
(risks of incompatibilities and instabilities.) 317.78 587.33 T
2 14 Q
(3) 317.78 558.42 T
2 13 Q
(A Return to V) 335.78 558.42 T
(irtual Machine Monitors) 414.36 558.42 T
1 10 Q
0.62 0.14 (To address the problem of providing system software for) 317.78 538.08 B
0 (scalable multiprocessors, we have developed a new twist on) 317.78 526.08 P
0.62 0.22 (the relatively old idea of virtual machine monitors [13].) 317.78 514.08 B
-0.25 (Rather than attempting to modify existing operating systems) 317.78 502.08 P
-0.44 (to run on scalable shared-memory multiprocessors, we insert) 317.78 490.08 P
-0.43 (an additional layer of software between the hardware and the) 317.78 478.08 P
-0.37 (operating system. This layer of software, called a virtual ma-) 317.78 466.08 P
0.62 0.01 (chine monitor, virtualizes all the resources of the machine,) 317.78 454.08 B
-0.03 (exporting a more conventional hardware interface to the op-) 317.78 442.08 P
0.62 0.11 (erating system. The monitor manages all the resources so) 317.78 430.08 B
0.18 (that multiple virtual machines can coexist on the same mul-) 317.78 418.08 P
-0.48 (tiprocessor. Figure) 317.78 406.08 P
-0.48 (1 shows how the virtual machine monitor) 394.79 406.08 P
-0.24 (allows multiple copies of potentially different operating sys-) 317.78 394.08 P
(tems to coexist.) 317.78 382.08 T
0.62 0.15 (Virtual machine monitors, in combination with com-) 335.78 370.08 B
0.62 0.09 (modity and specialized operating systems, form a flexible) 317.78 358.08 B
-0.07 (system software solution for these machines. A large ccNU-) 317.78 346.08 P
0.47 (MA multiprocessor can be configured with multiple virtual) 317.78 334.08 P
0.23 (machines each running a commodity operating system such) 317.78 322.08 P
-0.22 (as Microsoft\325s Windows NT or some variant of UNIX. Each) 317.78 310.08 P
-0.11 (virtual machine is configured with the processor and memo-) 317.78 298.08 P
-0.56 (ry resources that the operating system can effectively handle.) 317.78 286.08 P
-0.05 (The virtual machines communicate using standard distribut-) 317.78 274.08 P
(ed protocols to export the image of a cluster of machines.) 317.78 262.08 T
-0.21 (Although the system looks like a cluster of loosely-cou-) 335.78 250.08 P
0.06 (pled machines, the virtual machine monitor uses global pol-) 317.78 238.08 P
0.62 0.05 (icies to manage all the resources of the machine, allowing) 317.78 226.08 B
0.62 0.01 (workloads to exploit the fine-grain resource sharing poten-) 317.78 214.08 B
0.62 0.16 (tial of the hardware. For example, the monitor can move) 317.78 202.08 B
-0.32 (memory between virtual machines to keep applications from) 317.78 190.08 P
-0.61 (paging to disk when free memory is available in the machine.) 317.78 178.08 P
-0.38 (Similarly, the monitor dynamically schedules virtual proces-) 317.78 166.08 P
-0.36 (sors on the physical processors to balance the load across the) 317.78 154.08 P
(machine.) 317.78 142.08 T
-0.11 (The use of commodity software leverage the significant) 335.78 130.08 P
0.62 0.06 (engineering effort invested in these operating systems and) 317.78 118.08 B
-0.16 (allows ccNUMA machines to support their large application) 317.78 106.08 P
0.25 (base. Since the monitor is a relatively simple piece of code,) 317.78 94.08 P
0.36 (this can be done with a small implementation effort as well) 317.78 82.08 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 3) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.41 (as with a low risk of introducing software bugs and incom-) 54 461.33 P
(patibilities.) 54 449.33 T
0.44 (The approach offers two different possible solutions to) 72 437.33 P
0.62 0.04 (handle applications whose resource needs exceed the scal-) 54 425.33 B
0.62 0.07 (ability of commodity operating systems. First, a relatively) 54 413.33 B
-0.25 (simple change to the commodity operating system can allow) 54 401.33 P
-0.32 (applications to explicitly share memory regions across virtu-) 54 389.33 P
-0.07 (al machine boundaries. The monitor contains a simple inter-) 54 377.33 P
0.62 0 (face to setup these shared regions. The operating system is) 54 365.33 B
-0.37 (extended with a special virtual memory segment driver to al-) 54 353.33 P
-0.04 (low processes running on multiple virtual machines to share) 54 341.33 P
0.62 0.01 (memory. For example, a parallel database server could put) 54 329.33 B
0.62 0.06 (its buffer cache in such a shared memory region and have) 54 317.33 B
(query engines running on multiple virtual machines.) 54 305.33 T
-0.15 (Second, the flexibility of the approach supports special-) 72 293.33 P
0.62 0.09 (ized operating systems for resource-intensive applications) 54 281.33 B
0.19 (that do not need the full functionality of the commodity op-) 54 269.33 P
0.62 0.09 (erating systems. These simpler, specialized operating sys-) 54 257.33 B
0.62 0.15 (tems better support the needs of the applications and can) 54 245.33 B
-0.35 (easily scale to the size of the machine. For example, a virtual) 54 233.33 P
0.62 0.2 (machine running a highly-scalable lightweight operating) 54 221.33 B
-0.59 (system such as Puma [24] allows large scientific applications) 54 209.33 P
0.03 (to scale to the size of the machine. Since the specialized op-) 54 197.33 P
-0.34 (erating system runs in a virtual machine, it can run alongside) 54 185.33 P
0.62 0 (commodity operating systems running standard application) 54 173.33 B
0.62 0.13 (programs. Similarly, other important applications such as) 54 161.33 B
-0.1 (database and web servers could be run in highly-customized) 54 149.33 P
(operating systems such as database accelerators.) 54 137.33 T
-0.52 (Besides the flexibility to support a wide variety of work-) 72 125.33 P
0.62 0.05 (loads efficiently, this approach has a number of additional) 54 113.33 B
0.56 (advantages over other system software designs targeted for) 54 101.33 P
0.51 (ccNUMA machines. Running multiple copies of an operat-) 54 89.33 P
-0.59 (ing system, each in its own virtual machine, handles the chal-) 54 77.33 P
54 468 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
60 468 546 551 R
7 X
0 0 0 1 0 0 0 K
V
60 542.67 546 551 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
60 542.67 546 551 R
7 X
0 0 0 1 0 0 0 K
V
60 546.54 573 546.54 2 L
V
0.5 H
2 Z
0 X
N
54 468 558 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 1.) 60 536 T
( Ar) 108.89 536 T
(chitectur) 122.87 536 T
(e of Disco:) 161.01 536 T
1 F
-0.23 (Disco is a virtual machine monitor, a software layer between the hardware and mul-) 212.94 536 P
0.01 (tiple virtual machines that run independent operating systems. This allows multiple copies of a commodity operating sys-) 60 524 P
0.69 (tem to coexist with specialized \322thin\323 operating systems on the same hardware. The multiprocessor consists of a set of) 60 512 P
0.34 (processing elements \050PE\051 connected by a high-performance interconnect. Each processing element contains a number of) 60 500 P
60 476.33 546 484.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
60 476.33 546 484.67 R
7 X
0 0 0 1 0 0 0 K
V
60 480.2 573 480.2 2 L
V
0.5 H
2 Z
0 X
N
54 468 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(processors and a portion of the memory of the machine.) 60 488 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
130.7 552 481.7 635.5 R
0.5 H
0 Z
N
130.7 666 481.7 735 R
7 X
V
0 X
N
373.7 672 472.7 726 R
7 X
V
0 X
N
7 X
90 450 9 13.5 391.7 708.37 G
0 X
90 450 9 13.5 391.7 708.37 A
7 X
90 450 9 13.5 400.7 708.37 G
0 X
90 450 9 13.5 400.7 708.37 A
7 X
90 450 9 13.5 409.7 708.37 G
0 X
90 450 9 13.5 409.7 708.37 A
7 X
90 450 9 13.5 418.7 708.37 G
0 X
90 450 9 13.5 418.7 708.37 A
7 X
90 450 9 13.5 427.7 708.37 G
0 X
90 450 9 13.5 427.7 708.37 A
7 X
90 450 9 13.5 436.7 708.37 G
0 X
90 450 9 13.5 436.7 708.37 A
7 X
90 450 9 13.5 445.7 708.37 G
0 X
90 450 9 13.5 445.7 708.37 A
7 X
90 450 9 13.5 453.7 708.37 G
0 X
90 450 9 13.5 453.7 708.37 A
387.43 701 452.93 714 R
7 X
V
N
130.7 639 481.7 663 R
3 X
V
0 X
N
373.7 672 472.7 690 R
6 X
V
0 X
N
1 12 Q
(Thin OS) 402.7 678.04 T
139.91 603.36 174.06 626.5 R
7 X
V
0 X
N
182.39 603.36 216.54 626.5 R
7 X
V
0 X
N
225.08 603.36 259.24 626.5 R
7 X
V
0 X
N
267.78 603.36 301.93 626.5 R
7 X
V
0 X
N
310.47 603.36 344.62 626.5 R
7 X
V
0 X
N
353.16 603.36 387.31 626.5 R
7 X
V
0 X
N
438.54 603.36 472.7 626.5 R
7 X
V
0 X
N
395.85 603.36 430 626.5 R
7 X
V
0 X
N
284.85 603.36 284.85 595.64 2 L
7 X
V
2 Z
0 X
N
327.54 603.36 327.54 595.64 2 L
7 X
V
0 X
N
370.24 603.36 370.24 595.64 2 L
7 X
V
0 X
N
412.93 603.36 412.93 587.93 2 L
7 X
V
0 X
N
455.62 603.36 455.62 587.93 2 L
7 X
V
0 X
N
242.16 603.36 242.16 587.93 2 L
7 X
V
0 X
N
199.47 603.36 199.47 587.93 2 L
7 X
V
0 X
N
156.78 603.36 156.78 587.93 2 L
7 X
V
0 X
N
7 X
90 450 166.5 11.57 306.2 584.07 G
0 Z
0 X
90 450 166.5 11.57 306.2 584.07 A
184.7 672 274.7 726 R
7 X
V
0 X
N
283.7 672 319.7 726 R
7 X
V
0 X
N
184.7 672 274.7 690 R
6 X
V
0 X
N
283.7 672 319.7 690 R
6 X
V
0 X
N
(SMP-OS) 211.7 676.62 T
(OS) 293.95 677.37 T
139.7 672 175.7 726 R
7 X
V
0 X
N
139.7 672 175.7 690 R
6 X
V
0 X
N
(OS) 148.58 677.87 T
7 X
90 450 4.5 4.5 149.2 709.38 G
0 X
90 450 4.5 4.5 149.2 709.38 A
7 X
90 450 4.5 4.5 162.33 699.13 G
0 X
90 450 4.5 4.5 162.33 699.13 A
7 X
90 450 4.5 4.5 166.33 715.62 G
0 X
90 450 4.5 4.5 166.33 715.62 A
328.7 672 364.7 726 R
7 X
V
0 X
N
328.7 672 364.7 690 R
6 X
V
0 X
N
(OS) 338.04 676.35 T
7 X
90 450 13.5 13.5 301.83 707.87 G
0 X
90 450 13.5 13.5 301.83 707.87 A
7 X
90 450 13.5 13.5 347.08 708 G
0 X
90 450 13.5 13.5 347.08 708 A
1 10 Q
(DB) 294.45 705.69 T
(NFS) 338.58 705.69 T
7 X
90 450 13.5 13.5 202.2 706.62 G
0 X
90 450 13.5 13.5 202.2 706.62 A
7 X
90 450 13.5 13.5 220.2 706.62 G
0 X
90 450 13.5 13.5 220.2 706.62 A
7 X
90 450 13.5 13.5 238.2 706.62 G
0 X
90 450 13.5 13.5 238.2 706.62 A
7 X
90 450 13.5 13.5 256.2 706.62 G
0 X
90 450 13.5 13.5 256.2 706.62 A
(Scienti\336c App) 390.95 705.16 T
7 X
90 450 14.55 6.25 227.2 706 G
90 450 14.55 6.25 227.2 706 A
0 X
(Pmake) 213.7 703.13 T
0 0 0 0 1 1 1 K
2 16 Q
7 X
0 0 0 0 1 1 1 K
0.8 (Disco) 281.9 646.28 S
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Interconnect) 283 581 T
(PE) 149.5 612.5 T
(PE) 192.43 612.5 T
(PE) 235.36 612.5 T
(PE) 278.29 612.5 T
(PE) 321.21 612.5 T
(PE) 364.14 612.5 T
(PE) 407.07 612.5 T
(PE) 450 612.5 T
(ccNUMA Multiprocessor) 256.93 558.37 T
0 0 0 0 1 1 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.56 (lenges presented by ccNUMA machines such as scalability) 317.78 461.33 P
-0.52 (and fault-containment. The virtual machine becomes the unit) 317.78 449.33 P
0.62 0.04 (of scalability, analogous to the cell structure of Hurricane,) 317.78 437.33 B
0.15 (Hive, and Cellular IRIX. With this approach, only the mon-) 317.78 425.33 P
-0.13 (itor itself and the distributed systems protocols need to scale) 317.78 413.33 P
0.62 0.16 (to the size of the machine. The simplicity of the monitor) 317.78 401.33 B
-0.31 (makes this task easier than building a scalable operating sys-) 317.78 389.33 P
(tem.) 317.78 377.33 T
0.1 (The virtual machine also becomes the unit of fault con-) 335.78 365.33 P
0.56 (tainment where failures in the system software can be con-) 317.78 353.33 P
0.62 0.21 (tained in the virtual machine without spreading over the) 317.78 341.33 B
0.23 (entire machine. To provide hardware fault-containment, the) 317.78 329.33 P
0.43 (monitor itself must be structured into cells. Again, the sim-) 317.78 317.33 P
-0.25 (plicity of the monitor makes this easier than to protect a full-) 317.78 305.33 P
(blown operating system against hardware faults.) 317.78 293.33 T
0.62 0.1 (NUMA memory management issues can also be han-) 335.78 281.33 B
0.62 0.09 (dled by the monitor, effectively hiding the entire problem) 317.78 269.33 B
0.62 0.04 (from the operating systems. With the careful placement of) 317.78 257.33 B
0.25 (the pages of a virtual machine\325s memory and the use of dy-) 317.78 245.33 P
0.21 (namic page migration and page replication, the monitor can) 317.78 233.33 P
0.62 0.07 (export a more conventional view of memory as a uniform) 317.78 221.33 B
0.62 0.39 (memory access \050UMA\051 machine. This allows the non-) 317.78 209.33 B
0.11 (NUMA-aware memory management policies of commodity) 317.78 197.33 P
-0.25 (operating systems to work well, even on a NUMA machine.) 317.78 185.33 P
0.62 0.22 (Besides handling ccNUMA multiprocessors, the ap-) 335.78 173.33 B
0.59 (proach also inherits all the advantages of traditional virtual) 317.78 161.33 P
0 (machine monitors. Many of these benefits are still appropri-) 317.78 149.33 P
-0.16 (ate today and some have grown in importance. By exporting) 317.78 137.33 P
-0.28 (multiple virtual machines, a single ccNUMA multiprocessor) 317.78 125.33 P
-0.14 (can have multiple different operating systems simultaneous-) 317.78 113.33 P
0.55 (ly running on it. Older versions of the system software can) 317.78 101.33 P
0.14 (be kept around to provide a stable platform for keeping leg-) 317.78 89.33 P
0.62 0.05 (acy applications running. Newer versions can be staged in) 317.78 77.33 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 4) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.31 (carefully with critical applications residing on the older op-) 54 731.33 P
0.31 (erating systems until the newer versions have proven them-) 54 719.33 P
0.62 0.65 (selves. This approach provides an excellent way of) 54 707.33 B
0.55 (introducing new and innovative system software while still) 54 695.33 P
-0.38 (providing a stable computing base for applications that favor) 54 683.33 P
(stability over innovation.) 54 671.33 T
2 12 Q
(3.1  Challenges Facing V) 54 645 T
(irtual Machines) 179.89 645 T
1 10 Q
-0.52 (Unfortunately, the advantages of using virtual machine mon-) 54 628.33 P
0.62 0.08 (itors come with certain disadvantages as well. Among the) 54 616.33 B
0.62 0.17 (well-documented problems with virtual machines are the) 54 604.33 B
0.17 (overheads due to the virtualization of the hardware resourc-) 54 592.33 P
0.62 0.08 (es, resource management problems, and sharing and com-) 54 580.33 B
(munication problems.) 54 568.33 T
2 F
(Overheads.) 54 550.33 T
1 F
0.62 0.2 (The overheads present in traditional virtual) 110.11 550.33 B
0.62 0.06 (machine monitors come from many sources, including the) 54 538.33 B
0.62 0.08 (additional exception processing, instruction execution and) 54 526.33 B
0.62 0.12 (memory needed for virtualizing the hardware. Operations) 54 514.33 B
0.62 0.1 (such as the execution of privileged instructions cannot be) 54 502.33 B
-0.06 (safely exported directly to the operating system and must be) 54 490.33 P
-0.31 (emulated in software by the monitor. Similarly, the access to) 54 478.33 P
0.62 0.09 (I/O devices is virtualized, so requests must be intercepted) 54 466.33 B
(and remapped by the monitor.) 54 454.33 T
0.08 (In addition to execution time overheads, running multi-) 72 442.33 P
0.62 0.15 (ple independent virtual machines has a cost in additional) 54 430.33 B
-0.56 (memory. The code and data of each operating system and ap-) 54 418.33 P
0.62 0.17 (plication is replicated in the memory of each virtual ma-) 54 406.33 B
-0.1 (chine. Furthermore, large memory structures such as the file) 54 394.33 P
-0.12 (system buffer cache are also replicated resulting in a signifi-) 54 382.33 P
0.03 (cant increase in memory usage. A similar waste occurs with) 54 370.33 P
0.62 0.06 (the replication of file systems for the different virtual ma-) 54 358.33 B
(chines.) 54 346.33 T
2 F
(Resour) 54 328.33 T
(ce Management.) 84.37 328.33 T
1 F
0.62 0.4 (Virtual machine monitors fre-) 161.85 328.33 B
0.62 0.07 (quently experience resource management problems due to) 54 316.33 B
0.62 0.19 (the lack of information available to the monitor to make) 54 304.33 B
0.62 0.03 (good policy decisions. For example, the instruction execu-) 54 292.33 B
-0.35 (tion stream of an operating system\325s idle loop or the code for) 54 280.33 P
0.07 (lock busy-waiting is indistinguishable at the monitor\325s level) 54 268.33 P
-0.1 (from some important calculation. The result is that the mon-) 54 256.33 P
0.62 0.04 (itor may schedule resources for useless computation while) 54 244.33 B
0.62 0.02 (useful computation may be waiting. Similarly, the monitor) 54 232.33 B
0 (does not know when a page is no longer being actively used) 54 220.33 P
-0.18 (by a virtual machine, so it cannot reallocate it to another vir-) 54 208.33 P
0.62 0.09 (tual machine. In general, the monitor must make resource) 54 196.33 B
0.62 0.17 (management decisions without the high-level knowledge) 54 184.33 B
(that an operating system would have.) 54 172.33 T
2 F
(Communication and Sharing.) 54 154.33 T
1 F
0.62 0.09 (Finally, running multiple) 190.41 154.33 B
0.04 (independent operating systems made sharing and communi-) 54 142.33 P
0.62 0.08 (cation difficult. For example under CMS on VM/370, if a) 54 130.33 B
-0.46 (virtual disk containing a user\325s files was in use by one virtual) 54 118.33 P
-0.4 (machine it could not be accessed by another virtual machine.) 54 106.33 P
0 (The same user could not start two virtual machines, and dif-) 54 94.33 P
-0.52 (ferent users could not easily share files. The virtual machines) 54 82.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.62 0.13 (looked like a set of independent stand-alone systems that) 317.78 731.33 B
(simply happened to be sharing the same hardware.) 317.78 719.33 T
0 (Although these disadvantages still exist, we have found) 335.78 707.33 P
-0.06 (their impact can be greatly reduced by combining recent ad-) 317.78 695.33 P
-0.32 (vances in operating system technology with some new tricks) 317.78 683.33 P
-0.04 (implemented in the monitor. For example, the prevalence of) 317.78 671.33 P
0.31 (support in modern operating systems for interoperating in a) 317.78 659.33 P
0.33 (distributed environment greatly reduces the communication) 317.78 647.33 P
-0.14 (and sharing problems described above. In the following sec-) 317.78 635.33 P
0.62 0.11 (tion we present techniques that allow the overheads to be) 317.78 623.33 B
0 (small compared to the benefits that can be achieved through) 317.78 611.33 P
(this approach.) 317.78 599.33 T
2 14 Q
(4) 317.78 570.42 T
(Disco: A V) 335.78 570.42 T
(irtual Machine Monitor) 399.8 570.42 T
1 10 Q
0.06 (Disco is a virtual machine monitor designed for the FLASH) 317.78 550.08 P
0.28 (multiprocessor [17], a scalable cache-coherent multiproces-) 317.78 538.08 P
0.62 0.03 (sor. The FLASH multiprocessor consists of a collection of) 317.78 526.08 B
0.62 0.05 (nodes each containing a processor, main memory, and I/O) 317.78 514.08 B
0.49 (devices. The nodes are connected together with a high-per-) 317.78 502.08 P
-0.19 (formance scalable interconnect. The machines use a directo-) 317.78 490.08 P
-0.59 (ry to maintain cache coherency, providing to the software the) 317.78 478.08 P
0.41 (view of a shared-memory multiprocessor with non-uniform) 317.78 466.08 P
0 (memory access times. Although written for the FLASH ma-) 317.78 454.08 P
0.62 0 (chine, the hardware model assumed by Disco is also avail-) 317.78 442.08 B
0.62 0.2 (able on a number of commercial machines including the) 317.78 430.08 B
0.62 0.15 (Convex Exemplar [4], Silicon Graphics Origin2000) 317.78 418.08 B
0.62 0.15 ([18],) 537.81 418.08 B
(Sequent NUMAQ [19], and DataGeneral NUMALiine.) 317.78 406.08 T
-0.35 (This section describes the design and implementation of) 335.78 394.08 P
0.62 0.12 (Disco. We first describe the key abstractions exported by) 317.78 382.08 B
0.62 0.16 (Disco. We then describe the implementation of these ab-) 317.78 370.08 B
0.16 (stractions. Finally, we discuss the operating system require-) 317.78 358.08 P
(ments to run on top of Disco.) 317.78 346.08 T
2 12 Q
(4.1  Disco\325) 317.78 319.75 T
(s Interface) 370.33 319.75 T
1 10 Q
0.62 0.04 (Disco runs multiple independent virtual machines simulta-) 317.78 303.08 B
-0.49 (neously on the same hardware by virtualizing all the resourc-) 317.78 291.08 P
0.44 (es of the machine. Each virtual machine can run a standard) 317.78 279.08 P
-0.48 (operating system that manages its virtualized resources inde-) 317.78 267.08 P
(pendently of the rest of the system.) 317.78 255.08 T
2 F
(Pr) 317.78 237.08 T
(ocessors.) 328.15 237.08 T
1 F
0.62 0.31 (To match the FLASH machine, the virtual) 373.14 237.08 B
0.62 0.05 (CPUs of Disco provide the abstraction of a MIPS R10000) 317.78 225.08 B
0.62 0.26 (processor. Disco correctly emulates all instructions, the) 317.78 213.08 B
0.62 0.05 (memory management unit, and the trap architecture of the) 317.78 201.08 B
-0.33 (processor allowing unmodified applications and existing op-) 317.78 189.08 P
0.62 0.08 (erating systems to run on the virtual machine. Though re-) 317.78 177.08 B
0.34 (quired for the FLASH machine, the choice of the processor) 317.78 165.08 P
-0.5 (was unfortunate for Disco since the R10000 does not support) 317.78 153.08 P
0.62 0.26 (the complete virtualization of the kernel virtual address) 317.78 141.08 B
0.17 (space. Section) 317.78 129.08 P
0.17 (4.3.1 details the OS changes needed to allow) 377.66 129.08 P
(kernel-mode code to run on Disco.) 317.78 117.08 T
-0.24 (Besides the emulation of the MIPS processor, Disco ex-) 335.78 105.08 P
-0.56 (tends the architecture to support efficient access to some pro-) 317.78 93.08 P
0.62 0.12 (cessor functions. For example, frequent kernel operations) 317.78 81.08 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 5) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.32 (such as enabling and disabling CPU interrupts and accessing) 54 731.33 P
-0.62 (privileged registers can be performed using load and store in-) 54 719.33 P
-0.28 (structions on special addresses. This interface allows operat-) 54 707.33 P
0.19 (ing systems tuned for Disco to reduce the overheads caused) 54 695.33 P
(by trap emulation.) 54 683.33 T
2 F
(Physical Memory) 54 665.33 T
(.) 128.16 665.33 T
1 F
0.62 0.03 (Disco provides an abstraction of main) 138.16 665.33 B
0.62 0.21 (memory residing in a contiguous physical address space) 54 653.33 B
0.62 0.09 (starting at address zero. This organization was selected to) 54 641.33 B
0.62 0.08 (match the assumptions made by the operating systems we) 54 629.33 B
(run on top of Disco.) 54 617.33 T
0.62 0.12 (Since most commodity operating systems are not de-) 72 605.33 B
-0.52 (signed to effectively manage the non-uniform memory of the) 54 593.33 P
0.62 0.06 (FLASH machine, Disco uses dynamic page migration and) 54 581.33 B
0.62 0.01 (replication to export a nearly uniform memory access time) 54 569.33 B
0.62 0.21 (memory architecture to the software. This allows a non-) 54 557.33 B
-0.37 (NUMA aware operating system to run well on FLASH with-) 54 545.33 P
(out the changes needed for NUMA memory management.) 54 533.33 T
2 F
(I/O Devices.) 54 515.33 T
1 F
0.28 (Each virtual machine is created with a speci-) 113.16 515.33 P
-0.22 (fied set of I/O devices, such as disks, network interfaces, pe-) 54 503.33 P
0.62 0.47 (riodic interrupt timers, clock, and a console. As with) 54 491.33 B
-0.52 (processors and physical memory, most operating systems as-) 54 479.33 P
0.49 (sume exclusive access to their I/O devices, requiring Disco) 54 467.33 P
0.4 (to virtualize each I/O device. Disco must intercept all com-) 54 455.33 P
0.62 0.01 (munication to and from I/O devices to translate or emulate) 54 443.33 B
(the operation.) 54 431.33 T
0.21 (Because of their importance to the overall performance) 72 419.33 P
0.28 (and efficiency of the virtual machine, Disco exports special) 54 407.33 P
0.62 0.05 (abstractions for the SCSI disk and network devices. Disco) 54 395.33 B
0.41 (virtualizes disks by providing a set of virtual disks that any) 54 383.33 P
0.34 (virtual machine can mount. Virtual disks can be configured) 54 371.33 P
-0.21 (to support different sharing and persistency models. A virtu-) 54 359.33 P
-0.62 (al disk can either have modifications \050i.e. disk write requests\051) 54 347.33 P
0.5 (stay private to the virtual machine or they can be visible to) 54 335.33 P
0.39 (other virtual machines. In addition, these modifications can) 54 323.33 P
0.36 (be made persistent so that they survive the shutdown of the) 54 311.33 P
-0.25 (virtual machine or non-persistent so that they disappear with) 54 299.33 P
(each reboot.) 54 287.33 T
0.62 0.22 (To support efficient communication between virtual) 72 275.33 B
0.18 (machines, as well as other real machines, the monitor virtu-) 54 263.33 P
0.62 0.13 (alizes access to the networking devices of the underlying) 54 251.33 B
-0.42 (system. Each virtual machine is assigned a distinct link-level) 54 239.33 P
0.4 (address on an internal virtual subnet handled by Disco. Be-) 54 227.33 P
0.62 0.04 (sides the standard network interfaces such as Ethernet and) 54 215.33 B
0.62 0.06 (FDDI, Disco supports a special network interface that can) 54 203.33 B
0.36 (handle large transfer sizes without fragmentation. For com-) 54 191.33 P
-0.59 (munication with the world outside the machine, Disco acts as) 54 179.33 P
-0.08 (a gateway that uses the network interfaces of the machine to) 54 167.33 P
(send and receive packets.) 54 155.33 T
2 12 Q
(4.2  Implementation of Disco) 54 129 T
1 10 Q
0.62 0.19 (Like most operating systems that run on shared-memory) 54 112.33 B
0.62 0.03 (multiprocessors, Disco is implemented as a multi-threaded) 54 100.33 B
0.62 0.11 (shared memory program. Disco differs from existing sys-) 54 88.33 B
-0.53 (tems in that careful attention has been given to NUMA mem-) 54 76.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.62 0.98 (ory placement, cache-aware data structures, and) 317.78 731.33 B
0.22 (interprocessor communication patterns. For example, Disco) 317.78 719.33 P
0.62 0.14 (does not contain linked lists or other data structures with) 317.78 707.33 B
0.28 (poor cache behavior. The small size of Disco, about 13,000) 317.78 695.33 P
0.62 0.09 (lines of code, allows for a higher degree of tuning than is) 317.78 683.33 B
(possible with million line operating systems.) 317.78 671.33 T
0.04 (To improve NUMA locality, the small code segment of) 335.78 659.33 P
-0.25 (Disco, currently 72KB, is replicated into all the memories of) 317.78 647.33 P
0.31 (FLASH machine so that all instruction cache misses can be) 317.78 635.33 P
0.44 (satisfied from the local node. Machine-wide data structures) 317.78 623.33 P
0.62 0.17 (are partitioned so that the parts that are accessed only or) 317.78 611.33 B
0.62 0.04 (mostly by a single processor are in a memory local to that) 317.78 599.33 B
(processor.) 317.78 587.33 T
0.01 (For the data structures accessed by multiple processors,) 335.78 575.33 P
0.59 (very few locks are used and wait-free synchronization [14]) 317.78 563.33 P
-0.08 (using the MIPS LL/SC instruction pair is heavily employed.) 317.78 551.33 P
-0.1 (Disco communicates through shared-memory in most cases.) 317.78 539.33 P
0.62 0.18 (It uses inter-processor interrupts for specific actions that) 317.78 527.33 B
0.62 0 (change the state of a remote virtual processor, for example) 317.78 515.33 B
0.36 (TLB shootdowns and posting of an interrupt to a given vir-) 317.78 503.33 P
0.62 0.13 (tual CPU. Overall, Disco is structured more like a highly) 317.78 491.33 B
-0.43 (tuned and scalable SPLASH application [27] than like a gen-) 317.78 479.33 P
(eral-purpose operating system.) 317.78 467.33 T
2 11 Q
(4.2.1  V) 317.78 447.67 T
(irtual CPUs) 352.81 447.67 T
1 10 Q
0.12 (Like previous virtual machine monitors, Disco emulates the) 317.78 428.33 P
-0.53 (execution of the virtual CPU by using direct execution on the) 317.78 416.33 P
-0.35 (real CPU. To schedule a virtual CPU, Disco sets the real ma-) 317.78 404.33 P
-0.36 (chines\325 registers to those of the virtual CPU and jumps to the) 317.78 392.33 P
0.62 0.1 (current PC of the virtual CPU. By using direct execution,) 317.78 380.33 B
0.25 (most operations run at the same speed as they would on the) 317.78 368.33 P
-0.15 (raw hardware. The challenge of using direct execution is the) 317.78 356.33 P
0.24 (detection and fast emulation of those operations that cannot) 317.78 344.33 P
0.49 (be safely exported to the virtual machine. These operations) 317.78 332.33 P
0.62 0.11 (are primarily the execution of privileged instructions per-) 317.78 320.33 B
0.55 (formed by the operating system such as TLB modification,) 317.78 308.33 P
(and the direct access to physical memory and I/O devices.) 317.78 296.33 T
0.25 (For each virtual CPU, Disco keeps a data structure that) 335.78 284.33 P
-0.31 (acts much like a process table entry in a traditional operating) 317.78 272.33 P
0 (system. This structure contains the saved registers and other) 317.78 260.33 P
-0.54 (state of a virtual CPU when it is not scheduled on a real CPU.) 317.78 248.33 P
0.62 0.03 (To perform the emulation of privileged instructions, Disco) 317.78 236.33 B
-0.24 (additionally maintains the privileged registers and TLB con-) 317.78 224.33 P
(tents of the virtual CPU in this structure.) 317.78 212.33 T
-0.24 (On the MIPS processor, Disco runs in kernel mode with) 335.78 200.33 P
-0.4 (full access to the machine\325s hardware. When control is given) 317.78 188.33 P
0.58 (to a virtual machine to run, Disco puts the processor in su-) 317.78 176.33 P
-0.32 (pervisor mode when running the virtual machine\325s operating) 317.78 164.33 P
-0.52 (system, and in user mode otherwise. Supervisor mode allows) 317.78 152.33 P
-0.47 (the operating system to use a protected portion of the address) 317.78 140.33 P
0.62 0.03 (space \050the supervisor segment\051 but does not give access to) 317.78 128.33 B
0.62 0.16 (privileged instructions or physical memory. Applications) 317.78 116.33 B
0 (and kernel code can however still be directly executed since) 317.78 104.33 P
-0.43 (Disco emulates the operations that cannot be issued in super-) 317.78 92.33 P
0.43 (visor mode. When a trap such as page fault, system call, or) 317.78 80.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 6) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.11 (bus error occurs, the processor traps to the monitor that em-) 54 731.33 P
-0.36 (ulates the effect of the trap on the currently scheduled virtual) 54 719.33 P
0.62 0 (processor. This is done by updating some of the privileged) 54 707.33 B
0.55 (registers of the virtual processor and jumping to the virtual) 54 695.33 P
(machine\325s trap vector.) 54 683.33 T
-0.41 (Disco contains a simple scheduler that allows the virtual) 72 671.33 P
0.48 (processors to be time-shared across the physical processors) 54 659.33 P
0.42 (of the machine. The scheduler cooperates with the memory) 54 647.33 P
0.62 0.15 (management to support affinity scheduling that increases) 54 635.33 B
(data locality.) 54 623.33 T
2 11 Q
(4.2.2  V) 54 603.67 T
(irtual Physical Memory) 89.04 603.67 T
1 10 Q
-0.46 (To virtualize physical memory, Disco adds a level of address) 54 584.33 P
0 (translation and maintains) 54 572.33 P
0 F
0 (physical-to-machine) 157.04 572.33 P
1 F
0 ( address map-) 238.69 572.33 P
0.62 0.15 (pings. Virtual machines use) 54 560.33 B
0 F
0.62 0.15 (physical addr) 174.41 560.33 B
0.62 0.15 (esses) 231.39 560.33 B
1 F
0.62 0.15 ( that have) 252.71 560.33 B
0.37 (memory starting at address zero and continuing for the size) 54 548.33 P
-0.28 (of virtual machine\325s memory. Disco maps these physical ad-) 54 536.33 P
-0.1 (dresses to the 40 bit) 54 524.33 P
0 F
-0.1 (machine addr) 135.42 524.33 P
-0.1 (esses) 190.21 524.33 P
1 F
-0.1 ( used by the memory) 210.76 524.33 P
(system of the FLASH machine.) 54 512.33 T
-0.05 (Disco performs this physical-to-machine translation us-) 72 500.33 P
0.62 0.42 (ing the software-reloaded translation-lookaside buffer) 54 488.33 B
-0.22 (\050TLB\051 of the MIPS processor. When an operating system at-) 54 476.33 P
0.13 (tempts to insert a virtual-to-physical mapping into the TLB,) 54 464.33 P
-0.18 (Disco emulates this operation by translating the physical ad-) 54 452.33 P
0.55 (dress into the corresponding machine address and inserting) 54 440.33 P
0.22 (this corrected TLB entry into the TLB. Once the TLB entry) 54 428.33 P
0.44 (has been established, memory references through this map-) 54 416.33 P
0.62 (ping are translated with no additional overhead by the pro-) 54 404.33 P
(cessor.) 54 392.33 T
0.62 0.21 (To quickly compute the corrected TLB entry, Disco) 72 380.33 B
-0.49 (keeps a per virtual machine) 54 368.33 P
0 F
-0.49 (pmap) 164 368.33 P
1 F
-0.49 ( data structure that contains) 186.22 368.33 P
0.28 (one entry for each physical page of a virtual machine. Each) 54 356.33 P
0.62 0.05 (pmap entry contains a pre-computed TLB entry that refer-) 54 344.33 B
0.62 0.27 (ences the physical page location in real memory. Disco) 54 332.33 B
0.14 (merges that entry with the protection bits of the original en-) 54 320.33 P
-0.53 (try before inserting it into the TLB. The pmap entry also con-) 54 308.33 P
-0.5 (tains backmaps pointing to the virtual addresses that are used) 54 296.33 P
0.52 (to invalidate mappings from the TLB when a page is taken) 54 284.33 P
(away from the virtual machine by the monitor.) 54 272.33 T
0.17 (On MIPS processors, all user mode memory references) 72 260.33 P
0.62 0.04 (must be translated by the TLB but kernel mode references) 54 248.33 B
0.62 0.26 (used by operating systems may directly access physical) 54 236.33 B
0.31 (memory and I/O devices through the unmapped segment of) 54 224.33 P
0.62 0.14 (the kernel virtual address space. Many operating systems) 54 212.33 B
0.62 0.06 (place both the operating system code and data in this seg-) 54 200.33 B
0.62 0.18 (ment. Unfortunately, the MIPS architecture bypasses the) 54 188.33 B
0.06 (TLB for this direct access segment making it impossible for) 54 176.33 P
0.62 0.07 (Disco to efficiently remap these addresses using the TLB.) 54 164.33 B
-0.04 (Having each operating system instruction trap into the mon-) 54 152.33 P
-0.62 (itor would lead to unacceptable performance. We were there-) 54 140.33 P
-0.42 (fore required to re-link the operating system code and data to) 54 128.33 P
0.59 (a mapped region of the address space. This problem seems) 54 116.33 P
0.62 0.16 (unique to MIPS as other architectures such as Alpha can) 54 104.33 B
(remap these regions using the TLB.) 54 92.33 T
0.62 0.06 (The MIPS processors tag each TLB entry with an ad-) 72 80.33 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.62 0.1 (dress space identifier \050ASID\051 to avoid having to flush the) 317.78 731.33 B
-0.16 (TLB on MMU context switches. To avoid the complexity of) 317.78 719.33 P
0.62 0.12 (virtualizing the ASIDs, Disco flushes the machine\325s TLB) 317.78 707.33 B
0.43 (when scheduling a different virtual CPU on a physical pro-) 317.78 695.33 P
0.58 (cessor. This approach speeds up the translation of the TLB) 317.78 683.33 P
0.55 (entry since the ASID field provided by the virtual machine) 317.78 671.33 P
(can be used directly.) 317.78 659.33 T
-0.05 (A workload executing on top of Disco will suffer an in-) 335.78 647.33 P
-0.31 (creased number of TLB misses since the TLB is additionally) 317.78 635.33 P
0.56 (used for all operating system references and since the TLB) 317.78 623.33 P
0.55 (must be flushed on virtual CPU switches. In addition, each) 317.78 611.33 P
0.43 (TLB miss is now more expensive because of the emulation) 317.78 599.33 P
0.35 (of the trap architecture, the emulation of privileged instruc-) 317.78 587.33 P
0.55 (tions in the operating systems\325s TLB-miss handler, and the) 317.78 575.33 P
-0.04 (remapping of physical addresses described above. To lessen) 317.78 563.33 P
0.37 (the performance impact, Disco caches recent virtual-to-ma-) 317.78 551.33 P
0.42 (chine translations in a second-level software TLB. On each) 317.78 539.33 P
0.34 (TLB miss, Disco\325s TLB miss handler first consults the sec-) 317.78 527.33 P
0.62 0.01 (ond-level TLB. If it finds a matching virtual address it can) 317.78 515.33 B
0.62 0.05 (simply place the cached mapping in the TLB, otherwise it) 317.78 503.33 B
0.62 0.11 (forwards the TLB miss exception to the operating system) 317.78 491.33 B
0.28 (running on the virtual machine. The effect of this optimiza-) 317.78 479.33 P
0.62 0.22 (tion is that virtual machines appear to have much larger) 317.78 467.33 B
(TLBs than the MIPS processors.) 317.78 455.33 T
2 11 Q
(4.2.3  NUMA Memory Management) 317.78 435.67 T
1 10 Q
0.62 0.07 (Besides providing fast translation of the virtual machine\325s) 317.78 416.33 B
0.07 (physical addresses to real machine pages, the memory man-) 317.78 404.33 P
0.41 (agement part of Disco must also deal with the allocation of) 317.78 392.33 P
0.62 0.01 (real memory to virtual machines. This is a particularly im-) 317.78 380.33 B
-0.38 (portant task on ccNUMA machines since the commodity op-) 317.78 368.33 P
0.52 (erating system is depending on Disco to deal with the non-) 317.78 356.33 P
0.62 0.13 (uniform memory access times. Disco must try to allocate) 317.78 344.33 B
-0.62 (memory and schedule virtual CPUs so that cache misses gen-) 317.78 332.33 P
0.03 (erated by a virtual CPU will be satisfied from local memory) 317.78 320.33 P
-0.53 (rather than having to suffer the additional latency of a remote) 317.78 308.33 P
-0.25 (cache miss. To accomplish this, Disco implements a dynam-) 317.78 296.33 P
0.62 0.21 (ic page migration and page replication system [2,7] that) 317.78 284.33 B
-0.31 (moves or replicates pages to maintain locality between a vir-) 317.78 272.33 P
-0.31 (tual CPU\325s cache misses and the memory pages to which the) 317.78 260.33 P
(cache misses occur.) 317.78 248.33 T
0.62 0.04 (Disco targets machines that maintain cache-coherence) 335.78 236.33 B
0.6 (in hardware. On these machines, NUMA management, im-) 317.78 224.33 P
-0.39 (plemented either in the monitor or in the operating system, is) 317.78 212.33 P
-0.35 (not required for correct execution, but rather an optimization) 317.78 200.33 P
0.62 0.02 (that enhances data locality. Disco uses a robust policy that) 317.78 188.33 B
0.58 (moves only pages that will likely result in an eventual per-) 317.78 176.33 P
0.62 0.11 (formance benefit) 317.78 164.33 B
0.62 0.11 ([26]. Pages that are heavily accessed by) 390.78 164.33 B
0.33 (only one node are migrated to that node. Pages that are pri-) 317.78 152.33 P
0.45 (marily read-shared are replicated to the nodes most heavily) 317.78 140.33 P
0.62 0.03 (accessing them. Pages that are write-shared are not moved) 317.78 128.33 B
0.62 0.02 (because they fundamentally cannot benefit from either mi-) 317.78 116.33 B
0.13 (gration or replication. Disco\325s policy also limits the number) 317.78 104.33 P
(of times a page can move to avoid excessive overheads.) 317.78 92.33 T
0.28 (Disco\325s page migration and replication policy is driven) 335.78 80.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 7) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.18 (by the cache miss counting facility provided by the FLASH) 54 515.33 P
0.62 0.08 (hardware. FLASH counts cache misses to each page from) 54 503.33 B
0.59 (every physical processor. Once FLASH detects a hot page,) 54 491.33 P
0.62 0.02 (the monitor chooses between migrating and replicating the) 54 479.33 B
0.62 0.16 (hot page based on the cache miss counters. To migrate a) 54 467.33 B
0 (page, the monitor transparently changes the physical-to-ma-) 54 455.33 P
0.06 (chine mapping. It first invalidates any TLB entries mapping) 54 443.33 P
-0.07 (the old machine page and then copies the data to a local ma-) 54 431.33 P
-0.42 (chine page. To replicate a page, the monitor must first down-) 54 419.33 P
0.62 0.01 (grade all TLB entries mapping the machine page to ensure) 54 407.33 B
0.17 (read-only accesses. It then copies the page to the local node) 54 395.33 P
0.62 0.03 (and updates the relevant TLB entries mapping the old ma-) 54 383.33 B
0.62 0.05 (chine page. The resulting configuration after replication is) 54 371.33 B
(shown in Figure) 54 359.33 T
(2.) 121.5 359.33 T
0.28 (Disco maintains a) 72 347.33 P
0 F
0.28 (memmap) 147.01 347.33 P
1 F
0.28 ( data structure that contains) 183.11 347.33 P
-0.39 (an entry for each real machine memory page. To perform the) 54 335.33 P
0.24 (necessary TLB shootdowns during a page migration or rep-) 54 323.33 P
0.05 (lication, the memmap entry contains a list of the virtual ma-) 54 311.33 P
-0.58 (chines using the page and the virtual addresses used to access) 54 299.33 P
0.52 (them. A memmap entry also contains pointers to any repli-) 54 287.33 P
(cated copies of the page.) 54 275.33 T
2 11 Q
(4.2.4  V) 54 255.67 T
(irtual I/O Devices) 89.04 255.67 T
1 10 Q
0.25 (To virtualize access to I/O devices, Disco intercepts all) 72 236.33 P
-0.31 (device accesses from the virtual machine and eventually for-) 54 224.33 P
-0.47 (wards them to the physical devices. Disco could interpose on) 54 212.33 P
-0.24 (the programmed input/output \050PIOs\051 from the operating sys-) 54 200.33 P
0.12 (tem device drivers by trapping into the monitor and emulat-) 54 188.33 P
0.12 (ing the functionality of the hardware device assumed by the) 54 176.33 P
-0.22 (version of the operating system we used. However we found) 54 164.33 P
-0.36 (it was much cleaner to simply add special device drivers into) 54 152.33 P
0.62 0.01 (the operating system. Each Disco device defines a) 54 140.33 B
0 F
0.62 0.01 (monitor) 262.49 140.33 B
0.62 0.15 (call) 54 128.33 B
1 F
0.62 0.15 ( used by the device driver to pass all command argu-) 69.58 128.33 B
(ments in a single trap.) 54 116.33 T
0.35 (Devices such as disks and network interfaces include a) 72 104.33 P
0.52 (DMA map as part of their arguments. Disco must intercept) 54 92.33 P
-0.1 (such DMA requests to translate the physical addresses spec-) 54 80.33 P
54 522 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
292.78 666 346.78 717.94 R
0 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
N
203.16 666 257.16 717.94 R
V
N
147.78 594 255.78 612 R
7 X
V
0 X
N
165.78 612 165.78 594 2 L
7 X
V
2 Z
0 X
N
183.78 612 183.78 594 2 L
7 X
V
0 X
N
219.78 612 219.78 594 2 L
7 X
V
0 X
N
237.78 612 237.78 594 2 L
7 X
V
0 X
N
201.78 612 201.78 594 2 L
7 X
V
0 X
N
201.78 594 219.78 612 R
4 X
V
0 Z
0 X
N
219.77 612.38 210.78 612 218.2 617.09 220.34 615.19 4 Y
V
264.78 630 220.34 615.19 2 L
4 X
V
2 Z
0 X
N
328.98 616.51 336.77 612 327.78 611.69 326.99 614.45 4 Y
V
264.78 630 327 614.45 2 L
4 X
V
0 X
N
0 9 Q
(Physical Pages) 413.58 635.67 T
(Machine Pages) 413.33 599.67 T
(V) 416.66 687.49 T
(irtual Pages) 421.49 687.49 T
291.78 594 399.78 612 R
7 X
V
0 Z
0 X
N
309.78 612 309.78 594 2 L
7 X
V
2 Z
0 X
N
327.78 612 327.78 594 2 L
7 X
V
0 X
N
345.78 612 345.78 594 2 L
7 X
V
0 X
N
363.78 612 363.78 594 2 L
7 X
V
0 X
N
381.78 612 381.78 594 2 L
7 X
V
0 X
N
327.78 594 345.78 612 R
4 X
V
0 Z
0 X
N
200.66 668.06 254.66 720 R
6 X
V
0 X
N
290.66 668.06 344.66 720 R
6 X
V
0 X
N
273.61 649.73 264.77 648 271.35 654.15 273.75 652.59 4 Y
V
317.66 675 273.76 652.59 2 L
7 X
V
2 Z
0 X
N
259.23 655.1 264.77 648 256.32 651.09 256.62 653.93 4 Y
V
227.66 675 256.62 653.93 2 L
7 X
V
0 X
N
1 10 Q
(VCPU 0) 210.66 709 T
(VCPU 1) 300.16 708.5 T
J
137.66 738 263.66 738 263.66 585 137.66 585 4 Y
J
137.66 736 137.66 738 139.66 738 3 L
0 Z
N
[3.935 3.935] 3.935 I
139.66 738 261.66 738 2 L
N
J
261.66 738 263.66 738 263.66 736 3 L
N
[4.027 4.027] 4.027 I
263.66 736 263.66 587 2 L
N
J
263.66 587 263.66 585 261.66 585 3 L
N
[3.935 3.935] 3.935 I
261.66 585 139.66 585 2 L
N
J
139.66 585 137.66 585 137.66 587 3 L
N
[4.027 4.027] 4.027 I
137.66 587 137.66 736 2 L
N
J
281.66 738 407.66 738 407.66 585 281.66 585 4 Y
J
281.66 736 281.66 738 283.66 738 3 L
N
[3.935 3.935] 3.935 I
283.66 738 405.66 738 2 L
N
J
405.66 738 407.66 738 407.66 736 3 L
N
[4.027 4.027] 4.027 I
407.66 736 407.66 587 2 L
N
J
407.66 587 407.66 585 405.66 585 3 L
N
[3.935 3.935] 3.935 I
405.66 585 283.66 585 2 L
N
J
283.66 585 281.66 585 281.66 587 3 L
N
[4.027 4.027] 4.027 I
281.66 587 281.66 736 2 L
N
J
201.78 630 345.78 648 R
7 X
V
0 X
N
219.78 648 219.78 630 2 L
7 X
V
2 Z
0 X
N
237.78 648 237.78 630 2 L
7 X
V
0 X
N
255.78 648 255.78 630 2 L
7 X
V
0 X
N
273.78 648 273.78 630 2 L
7 X
V
0 X
N
309.78 648 309.78 630 2 L
7 X
V
0 X
N
327.78 648 327.78 630 2 L
7 X
V
0 X
N
291.78 648 291.78 630 2 L
7 X
V
0 X
N
255.78 630 273.78 648 R
4 X
V
0 Z
0 X
N
(Node 0) 139.88 727.67 T
(Node 1) 375.88 727.67 T
J
63 522 549 582 R
7 X
V
63 573.67 549 582 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 573.67 549 582 R
7 X
0 0 0 1 0 0 0 K
V
63 577.54 576 577.54 2 L
V
0.5 H
2 Z
0 X
N
54 522 558 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 2.) 63 567 T
( T) 111.89 567 T
(ranspar) 120.32 567 T
(ent Page Replication.) 154.03 567 T
1 F
1.01 (Disco uses the physical to machine mapping to replicate user and kernel) 249.3 567 P
0.42 (pages. Virtual pages from VCPUs 0 and 1 of the same virtual machine both map the same physical page of their virtual) 63 555 P
63 531.33 549 539.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 531.33 549 539.67 R
7 X
0 0 0 1 0 0 0 K
V
63 535.2 576 535.2 2 L
V
0.5 H
2 Z
0 X
N
54 522 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.29 (machine. However, Disco transparently maps each virtual page to a machine page replica that is located on the local node.) 63 543 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
J
339.81 623.61 336.78 612 333.2 623.46 336.51 623.53 4 Y
V
[3.462 4.451] 1.731 I
318.78 675 M
 331.59 660.85 335.56 641.05 336.52 623.53 D
0.5 H
2 Z
N
J
210.35 623.45 206.78 612 203.74 623.61 207.05 623.53 4 Y
V
[3.501 4.502] 1.751 I
226.28 675 M
 212.4 660.85 208.1 641.05 207.05 623.53 D
N
J
218.66 702 218.66 675 236.66 675 236.66 693 227.66 702 5 Y
7 X
V
0 Z
0 X
N
227.66 702 227.66 693 2 L
7 X
V
2 Z
0 X
N
227.66 693 236.66 693 2 L
7 X
V
0 X
N
308.66 702 308.66 675 326.66 675 326.66 693 317.66 702 5 Y
7 X
V
0 Z
0 X
N
317.66 702 317.66 693 2 L
7 X
V
2 Z
0 X
N
317.66 693 326.66 693 2 L
7 X
V
0 X
N
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.34 (ified by the operating systems into machine addresses. Dis-) 317.78 515.33 P
0.62 0.06 (co\325s device drivers then interact directly with the physical) 317.78 503.33 B
(device.) 317.78 491.33 T
-0.1 (For devices accessed by a single virtual machine, Disco) 335.78 479.33 P
0.62 0.11 (only needs to guarantee the exclusivity of this access and) 317.78 467.33 B
0.62 0.09 (translate the physical memory addresses of the DMA, but) 317.78 455.33 B
(does not need to virtualize the I/O resource itself.) 317.78 443.33 T
0.07 (The interposition on all DMA requests offers an oppor-) 335.78 431.33 P
0.12 (tunity for Disco to share disk and memory resources among) 317.78 419.33 P
0.46 (virtual machines. Disco\325s copy-on-write disks allow virtual) 317.78 407.33 P
0.62 0.06 (machines to share both main memory and disk storage re-) 317.78 395.33 B
0.62 0.05 (sources. Disco\325s virtual network devices allow virtual ma-) 317.78 383.33 B
-0.36 (chines to communicate efficiently. The combination of these) 317.78 371.33 P
-0.52 (two mechanisms, detailed in Section) 317.78 359.33 P
-0.52 (4.2.5 and Section) 464.59 359.33 P
-0.52 (4.2.6,) 535.5 359.33 P
0.18 (allows Disco to support a system-wide cache of disk blocks) 317.78 347.33 P
0.49 (in memory that can be transparently shared between all the) 317.78 335.33 P
(virtual machines.) 317.78 323.33 T
2 11 Q
(4.2.5  Copy-on-write Disks) 317.78 303.67 T
1 10 Q
0.62 0.2 (Disco intercepts every disk request that DMAs data into) 317.78 284.33 B
0.62 0.17 (memory. When a virtual machine requests to read a disk) 317.78 272.33 B
-0.11 (block that is already in main memory, Disco can process the) 317.78 260.33 P
0.62 0.08 (request without going to disk. Furthermore, if the disk re-) 317.78 248.33 B
-0.48 (quest is a multiple of the machine\325s page size, Disco can pro-) 317.78 236.33 P
0.3 (cess the DMA request by simply mapping the page into the) 317.78 224.33 P
0.07 (virtual machine\325s physical memory. In order to preserve the) 317.78 212.33 P
0.62 0 (semantics of a DMA operation, Disco maps the page read-) 317.78 200.33 B
-0.41 (only into the destination address page of the DMA. Attempts) 317.78 188.33 P
0.41 (to modify a shared page will result in a copy-on-write fault) 317.78 176.33 P
(handled internally by the monitor.) 317.78 164.33 T
0.62 0.16 (Using this mechanism, multiple virtual machines ac-) 335.78 152.33 B
0.22 (cessing a shared disk end up sharing machine memory. The) 317.78 140.33 P
0.62 0.05 (copy-on-write semantics means that the virtual machine is) 317.78 128.33 B
0.06 (unaware of the sharing with the exception that disk requests) 317.78 116.33 P
-0.44 (can finish nearly instantly. Consider an environment running) 317.78 104.33 P
0.62 0.09 (multiple virtual machines for scalability purposes. All the) 317.78 92.33 B
-0.12 (virtual machines can share the same root disk containing the) 317.78 80.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 8) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.62 0.02 (kernel and application programs. The code and other read-) 54 560.33 B
-0.46 (only data stored on the disk will be DMA-ed into memory by) 54 548.33 P
-0.49 (the first virtual machine that accesses it. Subsequent requests) 54 536.33 P
-0.31 (will simply map the page specified to the DMA engine with-) 54 524.33 P
0.62 0.12 (out transferring any data. The result is shown in Figure) 54 512.33 B
0.62 0.12 (3) 289.22 512.33 B
0.49 (where all virtual machines share these read-only pages. Ef-) 54 500.33 P
0.43 (fectively we get the memory sharing patterns expected of a) 54 488.33 P
-0.33 (single shared memory multiprocessor operating system even) 54 476.33 P
0.23 (though the system runs multiple independent operating sys-) 54 464.33 P
(tems.) 54 452.33 T
0.62 0.04 (To preserve the isolation of the virtual machines, disk) 72 440.33 B
-0.2 (writes must be kept private to the virtual machine that issues) 54 428.33 P
0.62 0.02 (them. Disco logs the modified sectors so that the copy-on-) 54 416.33 B
0.62 0.06 (write disk is never actually modified. For persistent disks,) 54 404.33 B
0.62 0.08 (these modified sectors would be logged in a separate disk) 54 392.33 B
0.62 0.08 (partition managed by Disco. To simplify our implementa-) 54 380.33 B
0.46 (tion, we only applied the concept of copy-on-write disks to) 54 368.33 P
0.62 0.04 (non-persistent disks and kept the modified sectors in main) 54 356.33 B
(memory whenever possible.) 54 344.33 T
0.62 0.11 (The implementation of this memory and disk sharing) 72 332.33 B
0.39 (feature of Disco uses two data structures. For each disk de-) 54 320.33 P
0 (vice, Disco maintains a B-Tree indexed by the range of disk) 54 308.33 P
0.17 (sectors being requested. This B-Tree is used to find the ma-) 54 296.33 P
-0.5 (chine memory address of the sectors in the global disk cache.) 54 284.33 P
-0.3 (A second B-Tree is kept for each disk and virtual machine to) 54 272.33 P
-0.09 (find any modifications to the block made by that virtual ma-) 54 260.33 P
0.62 0.16 (chine. We used B-Trees to efficiently support queries on) 54 248.33 B
(ranges of sectors [6].) 54 236.33 T
0.62 0.02 (The copy-on-write mechanism is used for file systems) 72 224.33 B
-0.03 (such as the root disk whose modifications as not intended to) 54 212.33 P
0.62 0.02 (be persistent or shared across virtual machines. For persis-) 54 200.33 B
-0.45 (tent disks such as the one containing user files, Disco enforc-) 54 188.33 P
0.62 0.01 (es that only a single virtual machine can mount the disk at) 54 176.33 B
-0.31 (any given time. As a result, Disco does not need to virtualize) 54 164.33 P
0.62 0.07 (the layout of the disk. Persistent disks can be accessed by) 54 152.33 B
-0.04 (other virtual machines through a distributed file system pro-) 54 140.33 P
(tocol such as NFS.) 54 128.33 T
2 11 Q
(4.2.6  V) 54 108.67 T
(irtual Network Interface) 89.04 108.67 T
1 10 Q
0.62 0.01 (The copy-on-write mechanism for disks allows the sharing) 54 89.33 B
0.62 0.01 (of memory resources across virtual machines, but does not) 54 77.33 B
54 567 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
266.19 696.5 428.19 723.5 R
0 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
N
86.19 696.5 248.19 723.5 R
V
N
63 572 549 626 R
7 X
V
63 617.67 549 626 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 617.67 549 626 R
7 X
0 0 0 1 0 0 0 K
V
63 621.54 576 621.54 2 L
V
0.5 H
2 Z
0 X
N
54 567 558 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 3.) 63 611 T
( T) 111.89 611 T
(ranspar) 120.32 611 T
(ent Sharing of Pages.) 154.03 611 T
1 F
-0.08 (Read only pages brought in from disk such as the kernel text and the buffer) 249.03 611 P
0.26 (cache can be transparently shared between virtual machines. This creates a global buffer cache shared across virtual ma-) 63 599 P
63 575.33 549 583.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 575.33 549 583.67 R
7 X
0 0 0 1 0 0 0 K
V
63 579.2 576 579.2 2 L
V
0.5 H
2 Z
0 X
N
54 567 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(chines and helps reduce the memory footprint of the system.) 63 587 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
84.69 698 246.69 725 R
7 X
V
0.5 H
0 Z
0 X
N
264.69 698 426.69 725 R
7 X
V
0 X
N
84.69 638.99 426.69 665.99 R
N
120.69 725 120.69 698 2 L
2 Z
N
147.69 725 147.69 698 2 L
N
300.69 725 300.69 698 2 L
N
327.69 725 327.69 698 2 L
N
192.69 638.99 228.69 665.99 R
6 X
V
0 Z
0 X
N
219.6 667.24 210.69 665.99 217.58 671.77 219.9 670.09 4 Y
V
282.69 698 219.9 670.09 2 L
6 X
V
2 Z
0 X
N
203.1 670.83 210.69 665.99 201.69 666.07 201.02 668.86 4 Y
V
102.69 698 201.02 668.86 2 L
6 X
V
0 X
N
111.69 638.99 138.69 665.99 R
4 X
V
0 Z
0 X
N
130.05 673.57 125.19 665.99 125.3 674.99 128.08 675.65 4 Y
V
134.78 698 128.08 675.65 2 L
4 X
V
2 Z
0 X
N
372.69 638.99 399.69 665.99 R
4 X
V
0 Z
0 X
N
379.29 671.77 386.18 665.99 377.27 667.24 376.97 670.09 4 Y
V
314.19 698 376.98 670.09 2 L
4 X
V
2 Z
0 X
N
255.69 638.99 345.69 665.99 R
6 X
V
0 Z
0 X
N
287.76 670.94 295.28 665.99 286.28 666.2 285.65 669 4 Y
V
192.69 698 285.66 668.99 2 L
6 X
V
2 Z
0 X
N
309.63 667.04 300.69 665.99 307.71 671.62 309.99 669.88 4 Y
V
377.19 698 309.99 669.88 2 L
6 X
V
0 X
N
84.69 698 120.69 725 R
6 X
V
0 Z
0 X
N
120.69 698 147.69 725 R
4 X
V
0 X
N
300.69 698 327.69 725 R
4 X
V
0 X
N
345.69 698 408.69 725 R
6 X
V
0 X
N
264.69 698 300.69 725 R
6 X
V
0 X
N
165.69 698 228.69 725 R
6 X
V
0 X
N
451.19 663 469.19 681 R
6 X
V
0 X
N
451.19 690 469.19 708 R
4 X
V
0 X
N
(Shared Pages) 473.69 670.67 T
(Private Pages) 473.15 698.68 T
2 F
(Buffer Cache) 349.1 709.17 T
(Code) 270.69 709.17 T
(Data) 305.19 709.17 T
(Code) 93.69 709.17 T
(Data) 125.69 709.17 T
(Buffer Cache) 169.19 708.67 T
1 F
(Machine Memory) 354.19 628.17 T
2 F
(Code) 201.19 649.16 T
(Buffer Cache) 271.1 649.16 T
(Data) 376.69 650.16 T
(Data) 115.69 649.66 T
1 F
(Physical Memory of VM 1) 105.19 729.8 T
(Physical Memory of VM 2) 286.99 729.8 T
451.19 636 469.19 654 R
N
(Free Pages) 473.32 641.67 T
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.28 (allow virtual machines to communicate with each other. To) 317.78 560.33 P
-0.28 (communicate, virtual machines use standard distributed pro-) 317.78 548.33 P
0.62 0.15 (tocols. For example, virtual machines share files through) 317.78 536.33 B
-0.07 (NFS. As a result, shared data will end up in both the client\325s) 317.78 524.33 P
-0.31 (and server\325s buffer cache. Without special attention, the data) 317.78 512.33 P
-0.28 (will be duplicated in machine memory. We designed a virtu-) 317.78 500.33 P
0.24 (al subnet managed by Disco that allows virtual machines to) 317.78 488.33 P
-0.52 (communicate with each other, while avoiding replicated data) 317.78 476.33 P
(whenever possible.) 317.78 464.33 T
0.62 0.04 (The virtual subnet and networking interfaces of Disco) 335.78 452.33 B
0.62 0.03 (also use copy-on-write mappings to reduce copying and to) 317.78 440.33 B
0.07 (allow for memory sharing. The virtual device uses ethernet-) 317.78 428.33 P
0.12 (like addresses and does not limit the maximum transfer unit) 317.78 416.33 P
0.42 (\050MTU\051 of packets. A message transfer sent between virtual) 317.78 404.33 P
0.62 0.05 (machines causes the DMA unit to map the page read-only) 317.78 392.33 B
-0.04 (into both the sending and receiving virtual machine\325s physi-) 317.78 380.33 P
0.62 0.17 (cal address spaces. The virtual network interface accepts) 317.78 368.33 B
-0.07 (messages that consist of scattered buffer fragments. Our im-) 317.78 356.33 P
-0.31 (plementation of the virtual network in Disco and in the oper-) 317.78 344.33 P
0.62 0.47 (ating system\325s device driver always respects the data) 317.78 332.33 B
0.38 (alignment of the outgoing message so that properly aligned) 317.78 320.33 P
0.62 0.15 (message fragments that span a complete page are always) 317.78 308.33 B
(remapped rather than copied.) 317.78 296.33 T
0.62 0.12 (Using this mechanism, a page of data read from disk) 335.78 284.33 B
0.07 (into the file cache of a file server running in one virtual ma-) 317.78 272.33 P
-0.31 (chine can be shared with client programs that request the file) 317.78 260.33 P
-0.01 (using standard distributed file system protocol such as NFS.) 317.78 248.33 P
0.62 0.09 (As shown in Figure) 317.78 236.33 B
0.62 0.09 (4, Disco supports a global disk cache) 402.42 236.33 B
-0.61 (even when a distributed file system is used to connect the vir-) 317.78 224.33 P
-0.32 (tual machines. In practice, the combination of copy-on-write) 317.78 212.33 P
-0.62 (disks and the access to persistent data through the specialized) 317.78 200.33 P
0.37 (network device provides a global buffer cache that is trans-) 317.78 188.33 P
(parently shared by independent virtual machines.) 317.78 176.33 T
0.62 (As a result, all read-only pages can be shared between) 335.78 164.33 P
0.62 0.08 (virtual machines. Although this reduces the memory foot-) 317.78 152.33 B
0.09 (print, this may adversely affect data locality as most sharers) 317.78 140.33 P
-0.03 (will access the page remotely. However, Disco\325s page repli-) 317.78 128.33 P
0.38 (cation policy selectively replicates the few \322hot\323 pages that) 317.78 116.33 P
0.62 0.19 (suffer the most cache misses. Pages are therefore shared) 317.78 104.33 B
0.62 0.12 (whenever possible and replicated only when necessary to) 317.78 92.33 B
(improve performance.) 317.78 80.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 9) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(4.3  Running Commodity Operating Systems) 54 492 T
1 10 Q
-0.37 (The \322commodity\323 operating system we run on Disco is IRIX) 54 475.33 P
0.62 0.2 (5.3, a UNIX SVR4 based operating system from Silicon) 54 463.33 B
0.14 (Graphics. Disco is however independent of any specific op-) 54 451.33 P
0.62 0.01 (erating system and we plan to support others such as Win-) 54 439.33 B
(dows NT and Linux.) 54 427.33 T
0.62 0.06 (In their support for portability, modern operating sys-) 72 415.33 B
-0.1 (tems present a hardware abstraction level \050HAL\051 that allows) 54 403.33 P
-0.47 (the operating system to be effectively \322ported\323 to run on new) 54 391.33 P
0.35 (platforms. Typically the HAL of modern operating systems) 54 379.33 P
0.53 (changes with each new version of a machine while the rest) 54 367.33 P
0.62 0.14 (of the system can remain unchanged. Our experience has) 54 355.33 B
-0.36 (been that relatively small changes to the HAL can reduce the) 54 343.33 P
(overhead of virtualization and improve resource usage.) 54 331.33 T
0.62 0.25 (Most of the changes made in IRIX were part of the) 72 319.33 B
0.27 (HAL) 54 307.33 P
1 8 Q
0.21 (1) 74.55 311.33 P
1 10 Q
0.27 (. All of the changes were simple enough that they are) 78.55 307.33 P
0.62 0.05 (unlikely to introduce a bug in the software and did not re-) 54 295.33 B
0.52 (quire a detailed understanding of the internals of IRIX. Al-) 54 283.33 P
0.36 (though we performed these changes at the source level as a) 54 271.33 P
-0.28 (matter of convenience, many of them were simple enough to) 54 259.33 P
-0.08 (be performed using binary translation or augmentation tech-) 54 247.33 P
(niques.) 54 235.33 T
2 11 Q
(4.3.1  Necessary Changes for MIPS Ar) 54 215.67 T
(chitectur) 234.05 215.67 T
(e) 276 215.67 T
1 10 Q
0.62 0.02 (Virtual processors running in supervisor mode cannot effi-) 54 196.33 B
0.62 (ciently access the KSEG0 segment of the MIPS virtual ad-) 54 184.33 P
0.62 0.05 (dress space, that always bypasses the TLB. Unfortunately,) 54 172.33 B
0.13 (many MIPS operating systems including IRIX 5.3 place the) 54 160.33 P
-0.1 (kernel code and data in the KSEG0 segment. As a result, we) 54 148.33 P
0.06 (needed to relocate the unmapped segment of the virtual ma-) 54 136.33 P
54 102 294.22 122 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 110 186 110 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
1.35 (1.  Unlike other operating systems, IRIX is not structured with a well-) 54 96.67 P
2.62 (de\336ned HAL. In this paper) 54 87.67 P
2.62 (, the HAL includes all the platform and) 150.14 87.67 P
(processor) 54 78.67 T
(-speci\336c functions of the operating system.) 84.5 78.67 T
54 513 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
295.6 655.33 421.6 727.33 R
6 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
7 X
90 450 28.75 11.5 383.85 675.83 G
0 X
90 450 28.75 11.5 383.85 675.83 A
355.1 675.83 412.6 710.33 R
7 X
V
N
355.1 710.33 355.1 675.83 2 L
V
2 Z
0 X
N
412.6 710.33 412.6 675.83 2 L
7 X
V
0 X
N
7 X
90 450 28.75 11.5 383.85 710.33 G
0 Z
0 X
90 450 28.75 11.5 383.85 710.33 A
115.6 655.33 241.6 727.33 R
6 X
V
0 X
N
7 X
90 450 28.75 11.5 176.85 675.83 G
0 X
90 450 28.75 11.5 176.85 675.83 A
148.1 675.83 205.6 710.33 R
7 X
V
N
148.1 710.33 148.1 675.83 2 L
V
2 Z
0 X
N
205.6 710.33 205.6 675.83 2 L
7 X
V
0 X
N
7 X
90 450 28.75 11.5 176.85 710.33 G
0 Z
0 X
90 450 28.75 11.5 176.85 710.33 A
151.6 583.33 385.6 601.33 R
7 X
V
0 X
N
169.6 601.33 169.6 583.33 2 L
7 X
V
2 Z
0 X
N
187.6 601.33 187.6 583.33 2 L
7 X
V
0 X
N
205.6 601.33 205.6 583.33 2 L
7 X
V
0 X
N
241.6 601.33 241.6 583.33 2 L
7 X
V
0 X
N
259.6 601.33 259.6 583.33 2 L
7 X
V
0 X
N
295.6 601.33 295.6 583.33 2 L
7 X
V
0 X
N
277.6 601.33 277.6 583.33 2 L
7 X
V
0 X
N
223.6 601.33 223.6 583.33 2 L
7 X
V
0 X
N
313.6 601.33 313.6 583.33 2 L
7 X
V
0 X
N
331.6 601.33 331.6 583.33 2 L
7 X
V
0 X
N
349.6 601.33 349.6 583.33 2 L
7 X
V
0 X
N
367.6 601.33 367.6 583.33 2 L
7 X
V
0 X
N
115.6 628.33 241.6 646.33 R
7 X
V
0 Z
0 X
N
133.6 646.33 133.6 628.33 2 L
7 X
V
2 Z
0 X
N
151.6 646.33 151.6 628.33 2 L
7 X
V
0 X
N
151.6 646.33 151.6 628.33 2 L
7 X
V
0 X
N
169.6 646.33 169.6 628.33 2 L
7 X
V
0 X
N
205.6 646.33 205.6 628.33 2 L
7 X
V
0 X
N
223.6 646.33 223.6 628.33 2 L
7 X
V
0 X
N
187.6 646.33 187.6 628.33 2 L
7 X
V
0 X
N
295.6 628.33 421.6 646.33 R
7 X
V
0 Z
0 X
N
313.6 646.33 313.6 628.33 2 L
7 X
V
2 Z
0 X
N
331.6 646.33 331.6 628.33 2 L
7 X
V
0 X
N
349.6 646.33 349.6 628.33 2 L
7 X
V
0 X
N
385.6 646.33 385.6 628.33 2 L
7 X
V
0 X
N
403.6 646.33 403.6 628.33 2 L
7 X
V
0 X
N
367.6 646.33 367.6 628.33 2 L
7 X
V
0 X
N
259.6 583.33 277.6 601.33 R
4 X
V
0 Z
0 X
N
169.6 628.33 187.6 646.33 R
4 X
V
0 X
N
295.6 628.33 313.6 646.33 R
4 X
V
0 X
N
385.6 628.33 403.6 646.33 R
4 X
V
0 X
N
261.02 606.2 268.6 601.33 259.6 601.44 258.94 604.23 4 Y
V
178.6 628.33 258.94 604.23 2 L
4 X
V
2 Z
0 X
N
277.09 604.3 268.59 601.34 274.23 608.35 276.83 607.15 4 Y
V
306.85 628.33 276.83 607.15 2 L
4 X
V
0 X
N
277.57 600.72 268.6 601.34 276.53 605.57 278.45 603.45 4 Y
V
394.6 628.33 278.46 603.45 2 L
4 X
V
0 X
N
311.45 652.16 304.59 646.34 307.33 654.91 310.19 654.73 4 Y
V
322.6 673.33 310.19 654.72 2 L
4 X
V
0 X
N
394.9 655.33 394.59 646.33 390.09 654.13 392.15 656.12 4 Y
V
385.6 682.33 392.15 656.12 2 L
4 X
V
0 X
N
181.08 654.99 178.6 646.33 176.12 654.99 178.6 656.42 4 Y
V
178.6 682.33 178.6 656.42 2 L
4 X
V
0 X
N
1 12 Q
(NFS Server) 151.6 729.94 T
(NFS Client) 331.25 729.94 T
2 8 Q
(Buffer Cache) 153.87 708.51 T
1 9 Q
(mbuf) 311.52 703.51 T
241.6 646.33 241.6 628.33 2 L
4 X
V
0 X
N
0 10 Q
(Physical Pages) 434.75 635.33 T
(Machine Pages) 434.47 590.5 T
(V) 438.17 675.5 T
(irtual Pages) 443.54 675.5 T
90 450 6.75 6.75 351.85 698.08 G
0 Z
90 450 6.75 6.75 351.85 698.08 A
0 0 0 0 1 1 1 K
2 9 Q
7 X
0 0 0 0 1 1 1 K
(2) 350.1 695.83 T
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
90 450 6.75 6.75 266.35 702.58 G
90 450 6.75 6.75 266.35 702.58 A
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(1) 264.6 699.83 T
0 0 0 1 0 0 0 K
62 508 548 580 R
0 0 0 1 0 0 0 K
V
62 571.67 548 580 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
62 571.67 548 580 R
7 X
0 0 0 1 0 0 0 K
V
62 575.54 575 575.54 2 L
V
0.5 H
2 Z
0 X
N
54 513 558 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 4.) 62 565 T
( T) 110.89 565 T
(ranspar) 119.32 565 T
(ent Sharing of Pages Over NFS.) 153.03 565 T
1 F
-0.11 (This figure illustrates the case when the NFS reply, to a read re-) 293.58 565 P
-0.09 (quest, includes a data page. \0501\051 The monitor\325s networking device remaps the data page from the source\325s machine address) 62 553 P
0.36 (space to the destination\325s. \0502\051 The monitor remaps the data page from the driver\325s mbuf to the clients buffer cache. This) 62 541 P
62 517.33 548 525.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
62 517.33 548 525.67 R
7 X
0 0 0 1 0 0 0 K
V
62 521.2 575 521.2 2 L
V
0.5 H
2 Z
0 X
N
54 513 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(remap is initiated by the operating system through a monitor call.) 62 529 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
168.6 694.83 168.6 670.08 185.1 670.08 185.1 686.58 176.85 694.83 5 Y
7 X
V
0.5 H
0 Z
0 X
N
176.85 694.83 176.85 686.58 2 L
7 X
V
2 Z
0 X
N
176.85 686.58 185.1 686.58 2 L
7 X
V
0 X
N
2 8 Q
(Buffer Cache) 360.37 708.07 T
376.6 694.83 376.6 670.08 393.1 670.08 393.1 686.58 384.85 694.83 5 Y
7 X
V
0 Z
0 X
N
384.85 694.83 384.85 686.58 2 L
7 X
V
2 Z
0 X
N
384.85 686.58 393.1 686.58 2 L
7 X
V
0 X
N
315.1 698.08 315.1 673.33 331.6 673.33 331.6 689.83 323.35 698.08 5 Y
7 X
V
0 Z
0 X
N
323.35 698.08 323.35 689.83 2 L
7 X
V
2 Z
0 X
N
323.35 689.83 331.6 689.83 2 L
7 X
V
0 X
N
314.97 687.96 322.59 683.19 313.61 683.2 312.91 685.97 4 Y
V
178.6 681.69 M
 219.41 699.02 269.71 697.47 312.92 685.97 D
1 H
N
379.07 686.94 386.47 681.83 377.49 682.24 376.92 685.05 4 Y
V
325.6 682.33 M
 341.89 687.74 360.18 689.38 376.94 685.04 D
N
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.62 0.04 (chines into a portion of the mapped supervisor segment of) 317.78 506.33 B
0.62 0 (the MIPS processor. This allowed Disco to emulate the di-) 317.78 494.33 B
0.16 (rect memory access efficiently using the TLB. The need for) 317.78 482.33 P
-0.41 (relocating the kernel appears to be unique to MIPS and is not) 317.78 470.33 P
0.62 0.17 (present in other modern architecture such as Alpha, x86,) 317.78 458.33 B
(SPARC, and PowerPC.) 317.78 446.33 T
0.62 0.06 (Making these changes to IRIX required changing two) 335.78 434.33 B
0.62 0.09 (header files that describe the virtual address space layout,) 317.78 422.33 B
0.62 0 (changing the linking options, as well as 15 assembly state-) 317.78 410.33 B
0.25 (ments in) 317.78 398.33 P
0 F
0.25 (locor) 354.95 398.33 P
0.25 (e.s) 375.69 398.33 P
1 F
0.25 (. Unfortunately, this meant that we needed) 386.52 398.33 P
(to re-compile and re-link the IRIX kernel to run on Disco) 317.78 386.33 T
(.) 547.18 386.33 T
2 11 Q
(4.3.2  Device Drivers) 317.78 366.67 T
1 10 Q
0.62 0.08 (Disco\325s monitor call interface reduces the complexity and) 317.78 347.33 B
-0.32 (overhead of accessing I/O devices. We implemented UART,) 317.78 335.33 P
0.62 0.09 (SCSI disks, and ethernet drivers that match this interface.) 317.78 323.33 B
0.03 (Since the monitor call interface provides the view of an ide-) 317.78 311.33 P
0.62 0.35 (alized device, the implementation of these drivers was) 317.78 299.33 B
0.36 (straightforward. Since kernels are normally designed to run) 317.78 287.33 P
0.62 0.2 (with different device drivers, this kind of change can be) 317.78 275.33 B
0.05 (made without the source and with only a small risk of intro-) 317.78 263.33 P
(ducing a bug.) 317.78 251.33 T
0.56 (The complexity of the interaction with the specific de-) 335.78 239.33 P
0.31 (vices is left to the virtual machine monitor. Fortunately, we) 317.78 227.33 P
0 (designed the virtual machine monitor\325s internal device driv-) 317.78 215.33 P
0.62 0.14 (er interface to simplify the integration of existing drivers) 317.78 203.33 B
-0.44 (written for commodity operating systems. Disco uses IRIX\325s) 317.78 191.33 P
(original device drivers.) 317.78 179.33 T
2 11 Q
(4.3.3  Changes to the HAL) 317.78 159.67 T
1 10 Q
-0.08 (Having to take a trap on every privileged register access can) 317.78 140.33 P
0.4 (cause significant overheads when running kernel code such) 317.78 128.33 P
-0.24 (as synchronization routines and trap handlers that frequently) 317.78 116.33 P
0.62 0.23 (access privileged registers. To reduce this overhead, we) 317.78 104.33 B
0.62 0.03 (patched the HAL of IRIX to convert these frequently used) 317.78 92.33 B
-0.25 (privileged instructions to use non-trapping load and store in-) 317.78 80.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 10) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.36 (structions to a special page of the address space that contains) 54 731.33 P
0.34 (these registers. This optimization is only applied to instruc-) 54 719.33 P
-0.25 (tions that read and write privileged registers without causing) 54 707.33 P
0.62 0.23 (other side-effects. Although for this experiment we per-) 54 695.33 B
0.33 (formed the patches by hand to only a few critical locations,) 54 683.33 P
0.62 0 (the patches could easily be automatically applied when the) 54 671.33 B
0.62 0.09 (privileged instruction first generates a trap. As part of the) 54 659.33 B
0.62 0.13 (emulation process, Disco could overwrite certain instruc-) 54 647.33 B
-0.49 (tions with the special load and store so it would not suffer the) 54 635.33 P
(overhead of the trap again.) 54 623.33 T
0.44 (To help the monitor make better resource management) 72 611.33 P
0.62 0 (decisions, we have added code to the HAL to pass hints to) 54 599.33 B
-0.38 (the monitor giving it higher-level knowledge of resource uti-) 54 587.33 P
0.22 (lization. We inserted a small number of monitor calls in the) 54 575.33 P
0.08 (physical memory management module of the operating sys-) 54 563.33 P
-0.36 (tems. The first monitor call requests a zeroed page. Since the) 54 551.33 P
0.62 0.06 (monitor must clear pages to ensure the isolation of virtual) 54 539.33 B
0.62 0.09 (machines anyway, the operating system is freed from this) 54 527.33 B
0.62 0.06 (task. A second monitor call informs Disco that a page has) 54 515.33 B
0.06 (been put on the operating system\325s freelist without a chance) 54 503.33 P
0.62 0.07 (of reclamation, so that Disco can immediately reclaim the) 54 491.33 B
(memory.) 54 479.33 T
-0.39 (To improve the utilization of processor resources, Disco) 72 467.33 P
-0.24 (assigns special semantics to the reduced power consumption) 54 455.33 P
-0.23 (mode of the MIPS processor. This mode is used by the oper-) 54 443.33 P
0.62 0.18 (ating system whenever the system is idle. Disco will de-) 54 431.33 B
0.62 0.18 (schedule the virtual CPU until the mode is cleared or an) 54 419.33 B
-0.23 (interrupt is posted. A monitor call inserted in the HAL\325s idle) 54 407.33 P
(loop would have had the same effect.) 54 395.33 T
2 11 Q
(4.3.4  Other Changes to IRIX) 54 375.67 T
1 10 Q
0.62 0.05 (For some optimizations Disco relies on the cooperation of) 54 356.33 B
0.62 0.01 (the operating system. For example, the virtual network de-) 54 344.33 B
(vice can only take advantage of the remapping techniques if) 54 332.33 T
-0.49 (the packets contain properly aligned, complete pages that are) 54 320.33 P
0.41 (not written. We found that the operating system\325s network-) 54 308.33 P
-0.21 (ing subsystem naturally meets most of the requirements. For) 54 296.33 P
-0.25 (example, it preserves the alignment of data pages, taking ad-) 54 284.33 P
0.2 (vantage of the scatter/gather options of networking devices.) 54 272.33 P
0.62 0.16 (Unfortunately, IRIX\325s) 54 260.33 B
0 F
0.62 0.16 (mbuf) 150.21 260.33 B
1 F
0.62 0.16 (management is such that the) 174.15 260.33 B
0.06 (data pages of recently freed mbufs are linked together using) 54 248.33 P
0.06 (the first word of the page. This guarantees that every packet) 54 236.33 P
-0.56 (transferred by the monitor\325s networking device using remaps) 54 224.33 P
-0.18 (will automatically trigger at least one copy-on-write fault on) 54 212.33 P
0.11 (the receiving end. A simple change to the mbuf freelist data) 54 200.33 P
(structure fixed this problem.) 54 188.33 T
0.62 0.01 (The kernel implementation of NFS always copies data) 72 176.33 B
0.34 (from the incoming mbufs to the receiving file buffer cache,) 54 164.33 P
0.62 0.16 (even when the packet contained un-fragmented, properly) 54 152.33 B
0.62 0.14 (aligned pages. This would have effectively prevented the) 54 140.33 B
0.53 (sharing of the file buffer cache across virtual machines. To) 54 128.33 P
-0.58 (have clients and servers transparently share the page, we spe-) 54 116.33 P
-0.27 (cialized the call to) 54 104.33 P
0 F
-0.27 (bcopy) 128.46 104.33 P
1 F
-0.27 ( to a new) 152.34 104.33 P
0 F
-0.27 (r) 190.15 104.33 P
-0.27 (emap) 193.67 104.33 P
1 F
-0.27 ( function offered by) 215.33 104.33 P
0.17 (the HAL. This remap function has the semantics of a bcopy) 54 92.33 P
0.36 (routine but uses a monitor call to remap the page whenever) 54 80.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
-0.04 (possible. Figure) 317.78 731.33 P
-0.04 (4 shows how a data page transferred during) 384.13 731.33 P
0.4 (an NFS read or write call is first remapped from the source) 317.78 719.33 P
0.62 0.17 (virtual machine to the destination memory buffer \050mbuf\051) 317.78 707.33 B
0.62 0.68 (page by the monitor\325s networking device, and then) 317.78 695.33 B
-0.35 (remapped into its final location by a call to the HAL\325s remap) 317.78 683.33 P
(function.) 317.78 671.33 T
2 12 Q
(4.4  SPLASHOS: A Specialized Operating) 317.78 645 T
(System) 317.78 631 T
1 10 Q
0.41 (The ability to run a thin or specialized operating system al-) 317.78 614.33 P
0.62 0.03 (lows Disco to support large-scale parallel applications that) 317.78 602.33 B
-0.09 (span the entire machine. These applications may not be well) 317.78 590.33 P
0.56 (served by a full function operating system. In fact, special-) 317.78 578.33 P
0.62 0.15 (ized operating systems such as Puma [24] are commonly) 317.78 566.33 B
(used to run scientific applications on parallel systems.) 317.78 554.33 T
0.62 0.06 (To illustrate this point, we developed a specialized li-) 335.78 542.33 B
-0.4 (brary operating system [11], \322SPLASHOS\323, that runs direct-) 317.78 530.33 P
-0.34 (ly on top of Disco. SPLASHOS contains the services needed) 317.78 518.33 P
-0.38 (to run SPLASH-2 applications [27]: thread creation and syn-) 317.78 506.33 P
0.62 0.19 (chronization routines, \322libc\323 routines, and an NFS client) 317.78 494.33 B
0.55 (stack for file I/O. The application is linked with the library) 317.78 482.33 P
0.47 (operating system and runs in the same address space as the) 317.78 470.33 P
0.18 (operating system. As a result, SPLASHOS does not need to) 317.78 458.33 P
0.62 0.28 (support a virtual memory subsystem, deferring all page) 317.78 446.33 B
(faulting responsibilities directly to Disco.) 317.78 434.33 T
0.62 0.07 (Although one might find SPLASHOS to be an overly) 335.78 422.33 B
0.47 (simplistic and limited operating system if it were to run di-) 317.78 410.33 P
0.33 (rectly on hardware, the ability to run it in a virtual machine) 317.78 398.33 P
0.62 0.08 (alongside commodity operating systems offers a powerful) 317.78 386.33 B
(and attractive combination.) 317.78 374.33 T
2 14 Q
(5) 317.78 345.42 T
(Experimental Results) 335.78 345.42 T
1 10 Q
0.62 0.11 (We have implemented Disco as described in the previous) 317.78 325.08 B
0.24 (section and performed a collection of experiments to evalu-) 317.78 313.08 P
0.12 (ate it. We describe our simulation-based experimental setup) 317.78 301.08 P
-0.14 (in Section 5.1. The first set of experiments presented in Sec-) 317.78 289.08 P
0.25 (tions 5.2 and 5.3 demonstrate that Disco overcomes the tra-) 317.78 277.08 P
0.43 (ditional problems associated with virtual machines, such as) 317.78 265.08 P
0.21 (high overheads and poor resource sharing. We then demon-) 317.78 253.08 P
-0.51 (strate in Sections 5.4 and 5.5 the benefits of using virtual ma-) 317.78 241.08 P
(chines, including improved scalability and data locality.) 317.78 229.08 T
2 12 Q
(5.1  Experimental Setup and W) 317.78 202.75 T
(orkloads) 477.8 202.75 T
1 10 Q
0.62 0.06 (Disco targets the FLASH machine, which is unfortunately) 317.78 186.08 B
0.62 0.06 (not yet available. As a result, we use the SimOS [22] ma-) 317.78 174.08 B
0.58 (chine simulator to develop and evaluate Disco. SimOS is a) 317.78 162.08 P
0 (machine simulator that models the hardware of MIPS-based) 317.78 150.08 P
0.39 (multiprocessors in enough detail to run essentially unmodi-) 317.78 138.08 P
0.06 (fied system software such as the IRIX operating system and) 317.78 126.08 P
0.43 (the Disco monitor. For this study, we configured SimOS to) 317.78 114.08 P
0.62 0.25 (resemble a large-scale multiprocessor with performance) 317.78 102.08 B
-0.29 (characteristics similar to FLASH. Although SimOS contains) 317.78 90.08 P
0.62 0.07 (simulation models of FLASH\325s MIPS R10000 processors,) 317.78 78.08 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 1) 522 42.33 T
(1) 549.31 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.18 (these simulation models are too slow for the workloads that) 54 542.33 P
0.62 0.06 (we chose to study. As a result, we model statically sched-) 54 530.33 B
0.52 (uled, non-superscalar processors running at twice the clock) 54 518.33 P
0.62 0 (rate. These simpler pipelines can be modelled one order of) 54 506.33 B
0.41 (magnitude faster than the R10000. The processors have the) 54 494.33 P
0.62 0.14 (on-chip caches of the MIPS R10000 \05032KB split instruc-) 54 482.33 B
0.62 0.05 (tion/data\051 and a 1MB board-level cache. In the absence of) 54 470.33 B
-0.14 (memory system contention, the minimum latency of a cache) 54 458.33 P
0.12 (miss is 300 nanoseconds to local memory and 900 nanosec-) 54 446.33 P
(onds to remote memory.) 54 434.33 T
0.62 0.08 (Although SimOS allows us to run realistic workloads) 72 422.33 B
0.62 0.05 (and examine their behavior in detail with its non-intrusive) 54 410.33 B
-0.56 (annotation mechanism, the simulation slowdowns prevent us) 54 398.33 P
0.06 (from examining long running workloads in detail. Using re-) 54 386.33 P
-0.17 (alistic but short workloads, we were able to study issues like) 54 374.33 P
0.21 (the CPU and memory overheads of virtualization, the bene-) 54 362.33 P
0.23 (fits on scalability, and NUMA memory management. How-) 54 350.33 P
0.62 0.17 (ever, studies that would require long running workloads,) 54 338.33 B
-0.11 (such as those fully evaluating Disco\325s resource sharing poli-) 54 326.33 P
-0.56 (cies, are not possible in this environment and will hence have) 54 314.33 P
(to wait until we have a real machine.) 54 302.33 T
0.62 0.04 (Table) 72 290.33 B
0.62 0.04 (1 lists the workloads of this study together with) 97.48 290.33 B
0.62 0.14 (their base simulated execution time. The workloads were) 54 278.33 B
0.62 0.02 (chosen to be representative of four typical uses of scalable) 54 266.33 B
-0.6 (compute servers. Although the simulated execution times are) 54 254.33 P
-0.47 (small, the SimOS environment allowed us to study the work-) 54 242.33 P
0.55 (load\325s behavior in great detail and determine that the small) 54 230.33 P
-0.24 (execution regions exhibit similar behavior to longer-running) 54 218.33 P
0.28 (worklaods. We also used the fast mode of SimOS to ensure) 54 206.33 P
(that the workloads did not include any cold start effects.) 54 194.33 T
2 12 Q
(5.2  Execution Overheads) 54 168 T
1 10 Q
0 (To evaluate the overheads of running on Disco, we ran each) 54 151.33 P
-0.22 (workload on a uniprocessor, once using IRIX directly on the) 54 139.33 P
-0.34 (simulated hardware, and once using Disco running IRIX in a) 54 127.33 P
-0.59 (single virtual machine on the same hardware. Figure) 54 115.33 P
-0.59 (5 shows) 262.31 115.33 P
0.62 0.27 (this comparison. Overall, the overhead of virtualization) 54 103.33 B
0.53 (ranges from a modest 3% for Raytrace to a high of 16% in) 54 91.33 P
0.28 (the pmake and database workloads. For the compute-bound) 54 79.33 P
54 549 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 522 558 747 R
7 X
0 0 0 1 0 0 0 K
V
J
2 9 Q
0 X
(W) 76.07 712.5 T
(orkload) 84.57 712.5 T
(Envir) 145.87 712.5 T
(onment) 167.71 712.5 T
(Description) 263.47 712.5 T
(Characteristics) 387.55 712.5 T
(Execution) 493.79 718 T
(T) 503.13 707 T
(ime) 508.97 707 T
1 F
(Pmake) 72.08 689 T
(Software Development) 124.56 689 T
(Parallel compilation \050-J2\051 of the) 224.02 694 T
(GNU chess application) 224.02 684 T
(Multiprogrammed, short-lived,) 353.41 694 T
(system and I/O intensive processes) 353.41 684 T
(3.9 sec) 500.52 689 T
(Engineering) 72.08 666 T
(Hardware Development) 124.56 666 T
(V) 224.02 671 T
(erilog simulation \050Chronologics) 229.52 671 T
(VCS\051 + machine simulation) 224.02 661 T
(Multiprogrammed, long running) 353.41 671 T
(processes) 353.41 661 T
(3.5 sec) 500.52 666 T
(Splash) 72.08 648 T
(Scienti\336c Computing) 124.56 648 T
(Raytrace from SPLASH-2) 224.02 648 T
(Parallel applications) 353.41 648 T
(12.9 sec) 496.02 648 T
(Database) 72.08 630 T
(Commercial Database) 124.56 630 T
(Sybase Relational Database) 224.02 635 T
(Server decision support workload) 224.02 625 T
(Single memory intensive process) 353.41 630 T
(2.0 sec) 500.52 630 T
2 10 Q
(T) 69.08 608.33 T
(able 1.) 74.83 608.33 T
( W) 102.61 608.33 T
(orkloads.) 114.57 608.33 T
1 F
-0.49 (Each workload is scaled differently for the uniprocessor and multiprocessor experiments. The report-) 159.29 608.33 P
0.2 (ed execution time is for the uniprocessor workloads running on IRIX without Disco. The execution time does not include) 69.08 596.33 P
0.28 (the time to boot the operating, ramp-up the applications and enter a steady execution state. This setup time is at least two) 69.08 584.33 P
69.08 560.67 558 569 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
69.08 560.67 558 569 R
7 X
0 0 0 1 0 0 0 K
V
69.08 564.54 582.09 564.54 2 L
V
0.5 H
2 Z
0 X
N
54 549 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(orders of magnitude longer and performed using SimOS\325s fast emulation mode.) 69.08 572.33 T
69.08 730.75 69.08 621.25 2 L
V
0.5 H
0 Z
N
121.56 731.25 121.56 620.75 2 L
V
N
221.02 731.25 221.02 620.75 2 L
V
N
350.41 731.25 350.41 620.75 2 L
V
N
483.18 731.25 483.18 620.75 2 L
V
N
542.91 730.75 542.91 621.25 2 L
V
N
68.83 731 543.16 731 2 L
V
N
68.83 703 543.16 703 2 L
V
N
68.83 680 543.16 680 2 L
V
N
68.83 657 543.16 657 2 L
V
N
68.83 644 543.16 644 2 L
V
N
68.83 621 543.16 621 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.62 0.29 (engineering and Raytrace workloads, the overheads are) 317.78 542.33 B
0.02 (mainly due to the Disco trap emulation of TLB reload miss-) 317.78 530.33 P
0.14 (es. The engineering and database workloads have an excep-) 317.78 518.33 P
0.62 0.69 (tionally high TLB miss rate and hence suffer large) 317.78 506.33 B
0.32 (overheads. Nevertheless, the overheads of virtualization for) 317.78 494.33 P
(these applications are less than 16%.) 317.78 482.33 T
-0.61 (The heavy use of OS services for file system and process) 335.78 470.33 P
0.62 0.32 (creation in the pmake workload makes it a particularly) 317.78 458.33 B
-0.19 (stressful workload for Disco. Table) 317.78 446.33 P
-0.19 (2 shows the effect of the) 460.9 446.33 P
-0.28 (monitor overhead on the top OS services. From this table we) 317.78 434.33 P
-0.16 (see the overheads can significantly lengthen system services) 317.78 422.33 P
0.62 0 (and trap handling. Short running services such as the IRIX) 317.78 410.33 B
0.33 (quick page fault handler, where the trap overhead itself is a) 317.78 398.33 P
0.62 0.08 (significant portion of the service, show slowdowns over a) 317.78 386.33 B
-0.22 (factor of 3. Even longer running services such as execve and) 317.78 374.33 P
(open system call show slowdowns of 1.6.) 317.78 362.33 T
-0.41 (These slowdowns can be explained by the common path) 335.78 350.33 P
317.78 72 560.78 342 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 47 45 315 224 268 179 318.33 159.45 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/sosp97/figures/ovhdbar-bw.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 47 45 315 224
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 1.000000 G9
131.51 206.066 145.683 206.066 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 206.066 145.683 206.066 
L9 grestore
gsave 1.000000 G9
131.51 198.266 145.683 198.266 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 198.266 145.683 198.266 
L9 grestore
6 /Helvetica SetTxt
( Idle) 0 147.101 200.366 TXL
72 72 S9
[] 1.000000 SL
131.51 198.266 145.683 198.266 
145.683 72 
131.51 72 
F9
gsave 0.0 G9 131.51 198.266 145.683 198.266 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
131.51 190.466 145.683 190.466 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 190.466 145.683 190.466 
L9 grestore
( DISCO) 0 147.101 192.566 TXL
72 72 S9
[] 1.000000 SL
gsave 0.800000 G9
131.51 190.466 145.683 190.466 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 190.466 145.683 190.466 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
131.51 182.666 145.683 182.666 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 182.666 145.683 182.666 
L9 grestore
( Kernel) 0 147.101 184.766 TXL
72 72 S9
[] 1.000000 SL
gsave 0.500000 G9
131.51 182.666 145.683 182.666 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 182.666 145.683 182.666 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
131.51 174.866 145.683 174.866 
145.683 72 
131.51 72 
F9
grestore
gsave 0.0 G9 131.51 174.866 145.683 174.866 
L9 grestore
( User) 0 147.101 176.966 TXL
72 72 S9
83.0204 72 M9
83.0204 157.175 M9
94.0408 157.175 M9
94.0408 72 M9
103.959 72 M9
103.959 170.573 M9
114.98 170.573 M9
114.98 72 M9
137.02 72 M9
137.02 157.175 M9
148.041 157.175 M9
148.041 72 M9
157.959 72 M9
157.959 162.013 M9
168.98 162.013 M9
168.98 72 M9
191.02 72 M9
191.02 157.175 M9
202.041 157.175 M9
202.041 72 M9
211.959 72 M9
211.959 159.748 M9
222.98 159.748 M9
222.98 72 M9
245.02 72 M9
245.02 157.175 M9
256.041 157.175 M9
256.041 72 M9
265.959 72 M9
265.959 171.042 M9
276.98 171.042 M9
276.98 72 M9
gsave
D9
grestore
gsave 1.000000 G9
276.98 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.0204 72 M9
83.0204 130.183 M9
94.0408 130.183 M9
94.0408 72 M9
103.959 72 M9
103.959 149.339 M9
114.98 149.339 M9
114.98 72 M9
137.02 72 M9
137.02 157.175 M9
148.041 157.175 M9
148.041 72 M9
157.959 72 M9
157.959 162.013 M9
168.98 162.013 M9
168.98 72 M9
191.02 72 M9
191.02 157.175 M9
202.041 157.175 M9
202.041 72 M9
211.959 72 M9
211.959 159.748 M9
222.98 159.748 M9
222.98 72 M9
245.02 72 M9
245.02 157.175 M9
256.041 157.175 M9
256.041 72 M9
265.959 72 M9
265.959 171.042 M9
276.98 171.042 M9
276.98 72 M9
gsave
D9
grestore
276.98 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
83.0204 72 M9
83.0204 130.183 M9
94.0408 130.183 M9
94.0408 72 M9
103.959 72 M9
103.959 128.82 M9
114.98 128.82 M9
114.98 72 M9
137.02 72 M9
137.02 157.175 M9
148.041 157.175 M9
148.041 72 M9
157.959 72 M9
157.959 153.726 M9
168.98 153.726 M9
168.98 72 M9
191.02 72 M9
191.02 157.175 M9
202.041 157.175 M9
202.041 72 M9
211.959 72 M9
211.959 154.543 M9
222.98 154.543 M9
222.98 72 M9
245.02 72 M9
245.02 157.175 M9
256.041 157.175 M9
256.041 72 M9
265.959 72 M9
265.959 149.441 M9
276.98 149.441 M9
276.98 72 M9
gsave
D9
grestore
gsave 0.800000 G9
276.98 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.0204 72 M9
83.0204 114.23 M9
94.0408 114.23 M9
94.0408 72 M9
103.959 72 M9
103.959 114.971 M9
114.98 114.971 M9
114.98 72 M9
137.02 72 M9
137.02 152.124 M9
148.041 152.124 M9
148.041 72 M9
157.959 72 M9
157.959 152.712 M9
168.98 152.712 M9
168.98 72 M9
191.02 72 M9
191.02 154.254 M9
202.041 154.254 M9
202.041 72 M9
211.959 72 M9
211.959 153.888 M9
222.98 153.888 M9
222.98 72 M9
245.02 72 M9
245.02 145.583 M9
256.041 145.583 M9
256.041 72 M9
265.959 72 M9
265.959 146.903 M9
276.98 146.903 M9
276.98 72 M9
gsave
D9
grestore
gsave 0.500000 G9
276.98 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.200000 SL
288 72 M9
gsave 0.000000 0.000000 0.000000 setrgbcolor
D9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
6 /Helvetica SetTxt
(0) 0 69 70.2 TXR
4 /Helvetica SetTxt
(|) -90 72 89.0351 TXC
6 /Helvetica SetTxt
(20) 0 69 87.2351 TXR
4 /Helvetica SetTxt
(|) -90 72 106.07 TXC
6 /Helvetica SetTxt
(40) 0 69 104.27 TXR
4 /Helvetica SetTxt
(|) -90 72 123.105 TXC
6 /Helvetica SetTxt
(60) 0 69 121.305 TXR
4 /Helvetica SetTxt
(|) -90 72 140.14 TXC
6 /Helvetica SetTxt
(80) 0 69 138.34 TXR
4 /Helvetica SetTxt
(|) -90 72 157.175 TXC
6 /Helvetica SetTxt
(100) 0 69 155.375 TXR
4 /Helvetica SetTxt
(|) -90 72 174.21 TXC
6 /Helvetica SetTxt
(120) 0 69 172.41 TXR
4 /Helvetica SetTxt
(|) -90 72 191.245 TXC
6 /Helvetica SetTxt
(140) 0 69 189.445 TXR
4 /Helvetica SetTxt
(|) -90 72 208.28 TXC
6 /Helvetica SetTxt
(160) 0 69 206.48 TXR
12 /Helvetica SetTxt
(|) 180 72 208.8 TXC
4 /Helvetica SetTxt
(|) 90 288 72 TXC
(|) 90 288 89.0351 TXC
(|) 90 288 106.07 TXC
(|) 90 288 123.105 TXC
(|) 90 288 140.14 TXC
(|) 90 288 157.175 TXC
(|) 90 288 174.21 TXC
(|) 90 288 191.245 TXC
(|) 90 288 208.28 TXC
6 /Helvetica SetTxt
() 0 180 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 288 72 
L9
0 setlinecap
72 72 72 208.8 
L9
72 208.8 288 208.8 
L9
288 72 288 208.8 
L9
() 0 288 57 TXR
( Normalized Execution Time) 90 53.7 208.8 TXR
(IRIX) 0 88.5306 65.16 TXC
(100) 0 88.5306 159.911 TXC
(DISCO) 0 109.469 65.16 TXC
(116) 0 109.469 173.309 TXC
8 /Helvetica-Bold SetTxt
(Pmake) 0 99 51.48 TXC
6 /Helvetica SetTxt
(IRIX) 0 142.531 65.16 TXC
(100) 0 142.531 159.911 TXC
(DISCO) 0 163.469 65.16 TXC
(106) 0 163.469 164.749 TXC
8 /Helvetica-Bold SetTxt
(Engineering) 0 153 51.48 TXC
6 /Helvetica SetTxt
(IRIX) 0 196.531 65.16 TXC
(100) 0 196.531 159.911 TXC
(DISCO) 0 217.469 65.16 TXC
(103) 0 217.469 162.484 TXC
8 /Helvetica-Bold SetTxt
(Raytrace) 0 207 51.48 TXC
6 /Helvetica SetTxt
(IRIX) 0 250.531 65.16 TXC
(100) 0 250.531 159.911 TXC
(DISCO) 0 271.469 65.16 TXC
(116) 0 271.469 173.778 TXC
8 /Helvetica-Bold SetTxt
(Database) 0 261 51.48 TXC
6 /Helvetica SetTxt
() 0 88.5306 58.86 TXC
() 0 88.5306 153.611 TXC
() 0 109.469 58.86 TXC
() 0 109.469 167.009 TXC
8 /Helvetica-Bold SetTxt
() 0 99 43.08 TXC
6 /Helvetica SetTxt
() 0 142.531 58.86 TXC
() 0 142.531 153.611 TXC
() 0 163.469 58.86 TXC
() 0 163.469 158.449 TXC
8 /Helvetica-Bold SetTxt
() 0 153 43.08 TXC
6 /Helvetica SetTxt
() 0 196.531 58.86 TXC
() 0 196.531 153.611 TXC
() 0 217.469 58.86 TXC
() 0 217.469 156.184 TXC
8 /Helvetica-Bold SetTxt
() 0 207 43.08 TXC
6 /Helvetica SetTxt
() 0 250.531 58.86 TXC
() 0 250.531 153.611 TXC
() 0 271.469 58.86 TXC
() 0 271.469 167.478 TXC
8 /Helvetica-Bold SetTxt
() 0 261 43.08 TXC
3 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
320.11 9.89 558.44 162.89 R
7 X
0 0 0 1 0 0 0 K
V
320.11 154.56 558.44 162.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.11 154.56 558.44 162.89 R
7 X
0 0 0 1 0 0 0 K
V
320.11 158.42 833.11 158.42 2 L
V
0.5 H
2 Z
0 X
N
317.78 72 560.78 342 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 5.) 320.11 147.89 T
( Overhead of V) 369 147.89 T
(irtualization.) 433.9 147.89 T
1 F
-0.36 (The figure com-) 494.18 147.89 P
0.68 (pares, for four uniprocessor workloads, the execution time) 320.11 135.89 P
-0.2 (when running IRIX directly on the simulated hardware with) 320.11 123.89 P
1.77 (IRIX running in a Disco virtual machine. The execution) 320.11 111.89 P
0.5 (time is separated between the time spent in user programs,) 320.11 99.89 P
320.11 76.22 558.44 84.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.11 76.22 558.44 84.56 R
7 X
0 0 0 1 0 0 0 K
V
320.11 80.09 833.11 80.09 2 L
V
0.5 H
2 Z
0 X
N
317.78 72 560.78 342 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(the IRIX kernel, Disco, and the idle loop.) 320.11 87.89 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 12) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.08 (to enter and leave the kernel for all page faults, system calls) 54 452.33 P
0.62 0.03 (and interrupts. This path includes many privileged instruc-) 54 440.33 B
-0.47 (tions that must be individually emulated by Disco. A restruc-) 54 428.33 P
0.62 0.41 (turing of the HAL of IRIX could remove most of this) 54 416.33 B
-0.49 (overhead. For example, IRIX uses the same TLB wired entry) 54 404.33 P
0.62 0.06 (for different purposes in user mode and in the kernel. The) 54 392.33 B
0.12 (path on each kernel entry and exit contains many privileged) 54 380.33 P
-0.43 (instructions that deal exclusively with this feature and are in-) 54 368.33 P
(dividually emulated.) 54 356.33 T
-0.2 (We also notice the relatively high overhead of servicing) 72 344.33 P
0.62 0.37 (kernel TLB-faults that occur since Disco runs IRIX in) 54 332.33 B
0.24 (mapped addresses rather than the unmapped addresses used) 54 320.33 P
-0.34 (when running directly on the machine. This version of Disco) 54 308.33 P
-0.33 (only mapped 4KB page pairs into the TLB. The use of larger) 54 296.33 P
0.62 0 (pages, supported by the MIPS TLB, could significantly re-) 54 284.33 B
0.62 0.08 (duce this overhead. Even with these large slowdowns, the) 54 272.33 B
0.62 0.13 (operating system intensive pmake workload with its high) 54 260.33 B
(trap and system call rate has an overhead of only 16%.) 54 248.33 T
-0.43 (Figure) 72 236.33 P
-0.43 (5 also shows a reduction in overall kernel time of) 100.61 236.33 P
0.28 (some workloads. Some of the work of the operating system) 54 224.33 P
0.62 0.06 (is being handled directly by the monitor. The reduction in) 54 212.33 B
0.55 (pmake is primarily due to the monitor initializing pages on) 54 200.33 P
-0.58 (behalf of the kernel and hence suffering the memory stall and) 54 188.33 P
0.04 (instruction execution overhead of this operation. The reduc-) 54 176.33 P
0.62 0.05 (tion of kernel time in Raytrace, Engineering and Database) 54 164.33 B
0.62 0.12 (workloads is due to the monitor\325s second-level TLB han-) 54 152.33 B
(dling most TLB misses.) 54 140.33 T
2 12 Q
(5.3  Memory Overheads) 54 114 T
1 10 Q
-0.4 (To evaluate the effectiveness of Disco\325s transparent memory) 54 97.33 P
-0.18 (sharing and quantify the memory overheads of running mul-) 54 85.33 P
54 459 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.5 459 558 774 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(Operating System) 83.13 695.5 T
(Service) 103.75 684.5 T
(% of) 182.05 706.5 T
(System) 177.68 695.5 T
(T) 181.51 684.5 T
(ime) 187.35 684.5 T
(\050IRIX\051) 178.43 673.5 T
(A) 226.96 706.5 T
(vg T) 232.8 706.5 T
(ime) 249.89 706.5 T
(per) 238.93 695.5 T
(Invocation) 224.92 684.5 T
(\050IRIX\051) 232.43 673.5 T
(Slowdown) 279.67 695.5 T
(on) 294.67 684.5 T
(Disco) 288.92 673.5 T
(Relative Execution T) 369.76 721 T
(ime on Disco) 450.09 721 T
(Kernel) 0 -270 347.02 672.75 TF
(Execution) 0 -270 358.02 666.75 TF
(TLB W) 0 -270 390.22 664.71 TF
(rite) 0 -270 390.22 693.8 TF
(Emulation) 0 -270 401.22 665.75 TF
(Other) 0 -270 427.92 674.5 TF
(Privileged) 0 -270 438.92 666.5 TF
(Instructions) 0 -270 449.92 662.75 TF
-0.56 (Monitor Calls) 0 -270 476.62 659.13 PF
(& Page Faults) 0 -270 487.62 658.75 TF
(Kenr) 0 -270 519.82 672.83 TF
(el) 0 -270 519.82 692.67 TF
(TLB Faults) 0 -270 530.82 663.87 TF
1 F
(DEMAND_ZERO) 74.08 646 T
(30%) 191.73 646 T
(21) 242.29 646 T
3 F
(m) 253.54 646 T
1 F
(s) 258.72 646 T
(1.42) 300.47 646 T
(0.43) 343.67 646 T
(0.21) 386.87 646 T
(0.16) 430.07 646 T
(0.47) 473.27 646 T
(0.16) 516.47 646 T
(QUICK_F) 74.08 633 T
(AUL) 111.41 633 T
(T) 129.07 633 T
(10%) 191.73 633 T
(5) 246.79 633 T
3 F
(m) 253.54 633 T
1 F
(s) 258.72 633 T
(3.17) 300.47 633 T
(1.27) 343.67 633 T
(0.80) 386.87 633 T
(0.56) 430.07 633 T
(0.00) 473.27 633 T
(0.53) 516.47 633 T
(open) 74.08 620 T
(9%) 196.23 620 T
(42) 242.29 620 T
3 F
(m) 253.54 620 T
1 F
(s) 258.72 620 T
(1.63) 300.47 620 T
(1.16) 343.67 620 T
(0.08) 386.87 620 T
(0.06) 430.07 620 T
(0.02) 473.27 620 T
(0.30) 516.47 620 T
(UTLB_MISS) 74.08 607 T
(7%) 196.23 607 T
(0.035) 231.04 607 T
3 F
(m) 253.54 607 T
1 F
(s) 258.72 607 T
(1.35) 300.47 607 T
(0.07) 343.67 607 T
(1.22) 386.87 607 T
(0.05) 430.07 607 T
(0.00) 473.27 607 T
(0.02) 516.47 607 T
(write) 74.08 594 T
(6%) 196.23 594 T
(12) 242.29 594 T
3 F
(m) 253.54 594 T
1 F
(s) 258.72 594 T
(2.14) 300.47 594 T
(1.01) 343.67 594 T
(0.24) 386.87 594 T
(0.21) 430.07 594 T
(0.31) 473.27 594 T
(0.17) 516.47 594 T
(read) 74.08 581 T
(6%) 196.23 581 T
(23) 242.29 581 T
3 F
(m) 253.54 581 T
1 F
(s) 258.72 581 T
(1.53) 300.47 581 T
(1.10) 343.67 581 T
(0.13) 386.87 581 T
(0.09) 430.07 581 T
(0.01) 473.27 581 T
(0.20) 516.47 581 T
(execve) 74.08 568 T
(6%) 196.23 568 T
(437) 237.79 568 T
3 F
(m) 253.54 568 T
1 F
(s) 258.72 568 T
(1.60) 300.47 568 T
(0.97) 343.67 568 T
(0.03) 386.87 568 T
(0.05) 430.07 568 T
(0.17) 473.27 568 T
(0.40) 516.47 568 T
2 10 Q
(T) 71.08 551.33 T
(able 2.) 76.83 551.33 T
( Service Br) 104.61 551.33 T
(eakdown for the Pmake workload.) 151.64 551.33 T
1 F
0.9 (This table breaks down the overheads of the virtualization for) 303.58 551.33 P
0.39 (the seven top kernel services of the pmake workload. DEMAND_ZERO is demand zero page fault, QUICK_FAULT, is) 71.08 539.33 P
0 (slow TLB refill, UTLB_MISS is a fast TLB refill. Other than the UTLB_MISS service, the IRIX and IRIX on Disco con-) 71.08 527.33 P
0.47 (figurations request the same number of services of each category. For each service, the execution time is expressed as a) 71.08 515.33 P
-0.32 (fraction of the IRIX time and separates the time spend in the kernel, emulating TLB writes and privileged instructions, per-) 71.08 503.33 P
0.38 (forming monitor call and emulating the unmapped segments. The slowdown column is the sum of the relative execution) 71.08 491.33 P
71.08 467.67 558 476 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.08 467.67 558 476 R
7 X
0 0 0 1 0 0 0 K
V
71.08 471.54 584.08 471.54 2 L
V
0.5 H
2 Z
0 X
N
54 459 558 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(times and measures the average slowdown for each service.) 71.08 479.33 T
71.08 733.75 71.08 564.25 2 L
V
0.5 H
0 Z
N
163.17 733.75 163.17 564.25 2 L
V
N
165.67 733.75 165.67 564.25 2 L
V
N
218.42 734.25 218.42 563.75 2 L
V
N
272.42 734.25 272.42 563.75 2 L
V
N
325.17 733.75 325.17 564.25 2 L
V
N
327.67 733.75 327.67 564.25 2 L
V
N
369.62 717.25 369.62 563.75 2 L
V
N
412.82 717.25 412.82 563.75 2 L
V
N
456.02 717.25 456.02 563.75 2 L
V
N
499.22 717.25 499.22 563.75 2 L
V
N
542.42 733.75 542.42 564.25 2 L
V
N
70.83 734 542.67 734 2 L
V
N
327.92 717 542.67 717 2 L
V
N
70.83 655 542.67 655 2 L
V
N
70.83 642 542.67 642 2 L
V
N
70.83 629 542.67 629 2 L
V
N
70.83 616 542.67 616 2 L
V
N
70.83 603 542.67 603 2 L
V
N
70.83 590 542.67 590 2 L
V
N
70.83 577 542.67 577 2 L
V
N
70.83 564 542.67 564 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.22 (tiple virtual machines, we use a single workload running un-) 317.78 452.33 P
0.62 0.41 (der six different system configurations. The workload) 317.78 440.33 B
-0.56 (consists of eight different instances of the basic pmake work-) 317.78 428.33 P
0.06 (load. Each pmake instance reads and writes files from a dif-) 317.78 416.33 P
0.62 0.01 (ferent disk. In all configurations we use an eight processor) 317.78 404.33 B
(machine with 256 megabytes of memory and ten disks.) 317.78 392.33 T
0.62 0.02 (The configurations differ in the number of virtual ma-) 335.78 380.33 B
-0.17 (chines used and the access to the workload file systems. The) 317.78 368.33 P
0.62 0.06 (first configuration \050IRIX\051 runs IRIX on the bare hardware) 317.78 356.33 B
0.62 0.09 (with all disks local. The next four configurations split the) 317.78 344.33 B
-0.21 (workload across one \0501VM\051, two \0502VMs\051, four \0504VMs\051, and) 317.78 332.33 P
0.09 (eight virtual machines \0508VMs\051. Each VM has the virtual re-) 317.78 320.33 P
0.49 (sources that correspond to an equal fraction of the physical) 317.78 308.33 P
-0.56 (resources. As a result, the total virtual processor and memory) 317.78 296.33 P
-0.37 (resources are equivalent to the total physical resources of the) 317.78 284.33 P
0.43 (machine, i.e. eight processors and 256 MB of memory. For) 317.78 272.33 P
-0.19 (example, the 4VMs configuration consists of dual-processor) 317.78 260.33 P
-0.53 (virtual machines, each with 64 MB of memory. The root disk) 317.78 248.33 P
0.62 0.28 (and workload binaries are mounted from copy-on-write) 317.78 236.33 B
0.15 (disks and shared among all the virtual machines. The work-) 317.78 224.33 P
0.52 (load file systems are mounted from different private exclu-) 317.78 212.33 P
(sive disks.) 317.78 200.33 T
0.62 0.06 (The last configuration runs eight virtual machines but) 335.78 188.33 B
0.62 0.05 (accesses workload files over NFS rather than from private) 317.78 176.33 B
0.62 0.05 (disks. One of the eight virtual machines also serves as the) 317.78 164.33 B
0.62 0.13 (NFS server for all file systems and is configured with 96) 317.78 152.33 B
0.62 0.17 (megabytes of memory. The seven other virtual machines) 317.78 140.33 B
0.62 0 (have only 32MB of memory. This results in more memory) 317.78 128.33 B
0.62 (configured to virtual machines than is available on the real) 317.78 116.33 P
0.62 0.05 (machine. This workload shows the ability to share the file) 317.78 104.33 B
0.62 0.1 (cache using standard distributed system protocols such as) 317.78 92.33 B
(NFS.) 317.78 80.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 13) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.47 (Figure) 72 461.33 P
-0.47 (6 compares the memory footprint of each config-) 100.61 461.33 P
-0.22 (uration at the end of the workload. The virtual physical foot-) 54 449.33 P
0.5 (print \050V\051 is the amount of memory that would be needed if) 54 437.33 P
0.62 0.02 (Disco did not support any sharing across virtual machines.) 54 425.33 B
-0.5 (The machine footprint \050M\051 is the amount of memory actually) 54 413.33 P
-0.35 (needed with the sharing optimizations. Pages are divided be-) 54 401.33 P
-0.31 (tween the IRIX data structures, the IRIX text, the file system) 54 389.33 P
(buffer cache and the Disco monitor itself.) 54 377.33 T
0.62 (Overall, we see that the effective sharing of the kernel) 72 365.33 P
0.62 0.03 (text and buffer cache limits the memory overheads of run-) 54 353.33 B
0 (ning multiple virtual machines. The read-shared data is kept) 54 341.33 P
(in a single location in memory.) 54 329.33 T
0.08 (The kernel private data is however not shareable across) 72 317.33 P
-0.03 (virtual machines. The footprint of the kernel private data in-) 54 305.33 P
0.62 0.12 (creases with the number of virtual machines, but remains) 54 293.33 B
0.62 0.07 (overall small. For the eight virtual machine configuration,) 54 281.33 B
0.62 0.01 (the eight copies of IRIX\325s data structures take less than 20) 54 269.33 B
(megabytes of memory.) 54 257.33 T
0.62 0.19 (In the NFS configuration, the virtual buffer cache is) 72 245.33 B
0.31 (larger than the comparable local configuration as the server) 54 233.33 P
0.62 0.18 (holds a copy of all workload files. However, that data is) 54 221.33 B
0.1 (transparently shared with the clients and the machine buffer) 54 209.33 P
-0.4 (cache is of comparable size to the other configurations. Even) 54 197.33 P
0.34 (using a standard distributed file system such as NFS, Disco) 54 185.33 P
0.62 0.08 (can maintain a global buffer cache and avoid the memory) 54 173.33 B
(overheads associated with multiple caching of data.) 54 161.33 T
2 12 Q
(5.4  Scalability) 54 135 T
1 10 Q
0.45 (To demonstrate the scalability benefits of using virtual ma-) 54 118.33 P
0.62 0.14 (chine monitors we ran the pmake workload under the six) 54 106.33 B
0.23 (configurations described in the previous section. IRIX5.3 is) 54 94.33 P
0.62 0.06 (not a NUMA-aware kernel and tends to allocate its kernel) 54 82.33 B
54 468 297 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 47 45 315 224 268 179 53.44 572 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/sosp97/figures/sharing-bw.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 47 45 315 224
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
88 206.062 102.173 206.062 
102.173 72 
88 72 
F9
gsave 0.0 G9 88 206.062 102.173 206.062 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
88 198.262 102.173 198.262 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 198.262 102.173 198.262 
L9 grestore
6 /Helvetica SetTxt
( DISCO) 0 103.591 200.362 TXL
72 72 S9
[] 1.000000 SL
gsave 0.900000 G9
88 198.262 102.173 198.262 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 198.262 102.173 198.262 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
88 190.462 102.173 190.462 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 190.462 102.173 190.462 
L9 grestore
( Buffer_Cache) 0 103.591 192.562 TXL
72 72 S9
[] 1.000000 SL
gsave 0.300000 G9
88 190.462 102.173 190.462 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 190.462 102.173 190.462 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
88 182.662 102.173 182.662 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 182.662 102.173 182.662 
L9 grestore
( IRIX_Text) 0 103.591 184.762 TXL
72 72 S9
[] 1.000000 SL
gsave 0.700000 G9
88 182.662 102.173 182.662 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 182.662 102.173 182.662 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
88 174.862 102.173 174.862 
102.173 72 
88 72 
F9
grestore
gsave 0.0 G9 88 174.862 102.173 174.862 
L9 grestore
( IRIX_Data) 0 103.591 176.962 TXL
72 72 S9
[] 1.000000 SL
80 72 M9
80 106.454 M9
88 106.454 M9
88 72 M9
92 72 M9
92 106.454 M9
100 106.454 M9
100 72 M9
116 72 M9
116 113.517 M9
124 113.517 M9
124 72 M9
128 72 M9
128 113.517 M9
136 113.517 M9
136 72 M9
152 72 M9
152 127.553 M9
160 127.553 M9
160 72 M9
164 72 M9
164 116.994 M9
172 116.994 M9
172 72 M9
188 72 M9
188 149.506 M9
196 149.506 M9
196 72 M9
200 72 M9
200 122.109 M9
208 122.109 M9
208 72 M9
224 72 M9
224 190.121 M9
232 190.121 M9
232 72 M9
236 72 M9
236 129.662 M9
244 129.662 M9
244 72 M9
260 72 M9
260 196.359 M9
268 196.359 M9
268 72 M9
272 72 M9
272 132.823 M9
280 132.823 M9
280 72 M9
gsave
D9
grestore
280 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
80 72 M9
80 106.454 M9
88 106.454 M9
88 72 M9
92 72 M9
92 106.454 M9
100 106.454 M9
100 72 M9
116 72 M9
116 106.275 M9
124 106.275 M9
124 72 M9
128 72 M9
128 106.275 M9
136 106.275 M9
136 72 M9
152 72 M9
152 119.408 M9
160 119.408 M9
160 72 M9
164 72 M9
164 108.85 M9
172 108.85 M9
172 72 M9
188 72 M9
188 141.374 M9
196 141.374 M9
196 72 M9
200 72 M9
200 113.977 M9
208 113.977 M9
208 72 M9
224 72 M9
224 183.082 M9
232 183.082 M9
232 72 M9
236 72 M9
236 122.623 M9
244 122.623 M9
244 72 M9
260 72 M9
260 187.796 M9
268 187.796 M9
268 72 M9
272 72 M9
272 124.26 M9
280 124.26 M9
280 72 M9
gsave
D9
grestore
gsave 0.900000 G9
280 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
80 72 M9
80 84.5721 M9
88 84.5721 M9
88 72 M9
92 72 M9
92 84.5721 M9
100 84.5721 M9
100 72 M9
116 72 M9
116 84.351 M9
124 84.351 M9
124 72 M9
128 72 M9
128 84.351 M9
136 84.351 M9
136 72 M9
152 72 M9
152 88.2948 M9
160 88.2948 M9
160 72 M9
164 72 M9
164 85.6776 M9
172 85.6776 M9
172 72 M9
188 72 M9
188 96.4571 M9
196 96.4571 M9
196 72 M9
200 72 M9
200 88.7489 M9
208 88.7489 M9
208 72 M9
224 72 M9
224 113.284 M9
232 113.284 M9
232 72 M9
236 72 M9
236 95.507 M9
244 95.507 M9
244 72 M9
260 72 M9
260 116.361 M9
268 116.361 M9
268 72 M9
272 72 M9
272 98.5425 M9
280 98.5425 M9
280 72 M9
gsave
D9
grestore
gsave 0.300000 G9
280 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
80 72 M9
80 82.0565 M9
88 82.0565 M9
88 72 M9
92 72 M9
92 82.0565 M9
100 82.0565 M9
100 72 M9
116 72 M9
116 81.8354 M9
124 81.8354 M9
124 72 M9
128 72 M9
128 81.8354 M9
136 81.8354 M9
136 72 M9
152 72 M9
152 83.2635 M9
160 83.2635 M9
160 72 M9
164 72 M9
164 83.1619 M9
172 83.1619 M9
172 72 M9
188 72 M9
188 86.3946 M9
196 86.3946 M9
196 72 M9
200 72 M9
200 86.2333 M9
208 86.2333 M9
208 72 M9
224 72 M9
224 93.1587 M9
232 93.1587 M9
232 72 M9
236 72 M9
236 92.9914 M9
244 92.9914 M9
244 72 M9
260 72 M9
260 96.236 M9
268 96.236 M9
268 72 M9
272 72 M9
272 96.0269 M9
280 96.0269 M9
280 72 M9
gsave
D9
grestore
gsave 0.700000 G9
280 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.200000 SL
288 72 M9
gsave 0.000000 0.000000 0.000000 setrgbcolor
D9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
6 /Helvetica SetTxt
(0) 0 69 70.2 TXR
4 /Helvetica SetTxt
(|) -90 72 87.2969 TXC
6 /Helvetica SetTxt
(10) 0 69 85.4969 TXR
4 /Helvetica SetTxt
(|) -90 72 102.594 TXC
6 /Helvetica SetTxt
(20) 0 69 100.794 TXR
4 /Helvetica SetTxt
(|) -90 72 117.891 TXC
6 /Helvetica SetTxt
(30) 0 69 116.091 TXR
4 /Helvetica SetTxt
(|) -90 72 133.188 TXC
6 /Helvetica SetTxt
(40) 0 69 131.388 TXR
4 /Helvetica SetTxt
(|) -90 72 148.484 TXC
6 /Helvetica SetTxt
(50) 0 69 146.684 TXR
4 /Helvetica SetTxt
(|) -90 72 163.781 TXC
6 /Helvetica SetTxt
(60) 0 69 161.981 TXR
4 /Helvetica SetTxt
(|) -90 72 179.078 TXC
6 /Helvetica SetTxt
(70) 0 69 177.278 TXR
4 /Helvetica SetTxt
(|) -90 72 194.375 TXC
6 /Helvetica SetTxt
(80) 0 69 192.575 TXR
12 /Helvetica SetTxt
(|) 180 72 208.8 TXC
4 /Helvetica SetTxt
(|) 90 288 72 TXC
(|) 90 288 87.2969 TXC
(|) 90 288 102.594 TXC
(|) 90 288 117.891 TXC
(|) 90 288 133.188 TXC
(|) 90 288 148.484 TXC
(|) 90 288 163.781 TXC
(|) 90 288 179.078 TXC
(|) 90 288 194.375 TXC
6 /Helvetica SetTxt
() 0 180 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 288 72 
L9
0 setlinecap
72 72 72 208.8 
L9
72 208.8 288 208.8 
L9
288 72 288 208.8 
L9
() 0 288 57 TXR
( Footprint size (MB)) 90 53.7 208.8 TXR
(V) 0 84 65.16 TXC
(23) 0 84 109.19 TXC
(M) 0 96 65.16 TXC
(23) 0 96 109.19 TXC
8 /Helvetica-Bold SetTxt
(IRIX) 0 90 51.48 TXC
6 /Helvetica SetTxt
(V) 0 120 65.16 TXC
(27) 0 120 116.253 TXC
(M) 0 132 65.16 TXC
(27) 0 132 116.253 TXC
8 /Helvetica-Bold SetTxt
(1VM) 0 126 51.48 TXC
6 /Helvetica SetTxt
(V) 0 156 65.16 TXC
(36) 0 156 130.289 TXC
(M) 0 168 65.16 TXC
(29) 0 168 119.73 TXC
8 /Helvetica-Bold SetTxt
(2VMs) 0 162 51.48 TXC
6 /Helvetica SetTxt
(V) 0 192 65.16 TXC
(51) 0 192 152.242 TXC
(M) 0 204 65.16 TXC
(33) 0 204 124.845 TXC
8 /Helvetica-Bold SetTxt
(4VMs) 0 198 51.48 TXC
6 /Helvetica SetTxt
(V) 0 228 65.16 TXC
(77) 0 228 192.857 TXC
(M) 0 240 65.16 TXC
(38) 0 240 132.398 TXC
8 /Helvetica-Bold SetTxt
(8VMs) 0 234 51.48 TXC
6 /Helvetica SetTxt
(V) 0 264 65.16 TXC
(81) 0 264 199.095 TXC
(M) 0 276 65.16 TXC
(40) 0 276 135.559 TXC
8 /Helvetica-Bold SetTxt
(8VMs+NFS) 0 270 51.48 TXC
6 /Helvetica SetTxt
() 0 84 58.86 TXC
() 0 84 102.89 TXC
() 0 96 58.86 TXC
() 0 96 102.89 TXC
8 /Helvetica-Bold SetTxt
() 0 90 43.08 TXC
6 /Helvetica SetTxt
() 0 120 58.86 TXC
() 0 120 109.953 TXC
() 0 132 58.86 TXC
() 0 132 109.953 TXC
8 /Helvetica-Bold SetTxt
() 0 126 43.08 TXC
6 /Helvetica SetTxt
() 0 156 58.86 TXC
() 0 156 123.989 TXC
() 0 168 58.86 TXC
() 0 168 113.43 TXC
8 /Helvetica-Bold SetTxt
() 0 162 43.08 TXC
6 /Helvetica SetTxt
() 0 192 58.86 TXC
() 0 192 145.942 TXC
() 0 204 58.86 TXC
() 0 204 118.545 TXC
8 /Helvetica-Bold SetTxt
() 0 198 43.08 TXC
6 /Helvetica SetTxt
() 0 228 58.86 TXC
() 0 228 186.557 TXC
() 0 240 58.86 TXC
() 0 240 126.098 TXC
8 /Helvetica-Bold SetTxt
() 0 234 43.08 TXC
6 /Helvetica SetTxt
() 0 264 58.86 TXC
() 0 264 192.795 TXC
() 0 276 58.86 TXC
() 0 276 129.259 TXC
8 /Helvetica-Bold SetTxt
() 0 270 43.08 TXC
3 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
54.67 441 292.44 576 R
7 X
0 0 0 1 0 0 0 K
V
54.67 567.67 292.44 576 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.67 567.67 292.44 576 R
7 X
0 0 0 1 0 0 0 K
V
54.67 571.54 567.67 571.54 2 L
V
0.5 H
2 Z
0 X
N
54 468 297 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 6.) 54.67 561 T
( Data Sharing in Disco.) 103.56 561 T
1 F
0.14 (This figure compares) 207.18 561 P
2.11 (the memory footprints of the different configurations of) 54.67 549 P
0.74 (Section) 54.67 537 P
0.74 (5.3 which run the pmake workload. For each con-) 87.17 537 P
-0.12 (figuration, \322V\323 breaks down the virtual footprint of the sys-) 54.67 525 P
1.5 (tem and \322M\323 and actual machine memory footprint. The) 54.67 513 P
0.34 (virtual footprint is equivalent to the amount of memory re-) 54.67 501 P
54.67 477.33 292.44 485.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.67 477.33 292.44 485.67 R
7 X
0 0 0 1 0 0 0 K
V
54.67 481.2 567.67 481.2 2 L
V
0.5 H
2 Z
0 X
N
54 468 297 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(quired in the absence of memory sharing optimizations.) 54.67 489 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.49 (data structures from a single node of FLASH causing large) 317.78 398.33 P
0.45 (hot-spots. To compensate for this, we changed the physical) 317.78 386.33 P
-0.37 (memory layout of FLASH so that machine pages are allocat-) 317.78 374.33 P
0.15 (ed to nodes in a round-robin fashion. This round-robin allo-) 317.78 362.33 P
0.03 (cation eliminates hot spots and results in significantly better) 317.78 350.33 P
0.62 0.29 (performance for the IRIX runs. Since Disco is NUMA-) 317.78 338.33 B
0.62 0.19 (aware, we were able to use the actual layout of machine) 317.78 326.33 B
-0.52 (memory, which allocates consecutive pages to each node. To) 317.78 314.33 P
0.35 (further simplify the comparison, we disabled dynamic page) 317.78 302.33 P
(migration and replication for the Disco runs.) 317.78 290.33 T
0.62 0.11 (Figure) 335.78 278.33 B
0.62 0.11 (7 shows the execution time of each workload.) 365.19 278.33 B
0.62 0.05 (Even at just eight processors, IRIX suffers from high syn-) 317.78 266.33 B
0.62 0.03 (chronization and memory system overheads for system-in-) 317.78 254.33 B
0.62 0.28 (tensive workloads such as this. For example, about one) 317.78 242.33 B
-0.36 (quarter of the overall time is spent in the kernel synchroniza-) 317.78 230.33 P
0.62 0.1 (tion routines and the 67% of the remaining kernel time is) 317.78 218.33 B
-0.25 (spent stalled in the memory system on communication miss-) 317.78 206.33 P
0.58 (es. The version of IRIX that we used has a known primary) 317.78 194.33 P
0.62 0.09 (scalability bottleneck,) 317.78 182.33 B
0 F
0.62 0.09 (memlock) 411.53 182.33 B
1 F
0.62 0.09 (, the spinlock that protects) 447.72 182.33 B
-0.35 (the memory management data structures of IRIX [23]. Other) 317.78 170.33 P
-0.59 (operating systems such as NT also have comparable scalabil-) 317.78 158.33 P
(ity problems, even with small numbers of processors [21].) 317.78 146.33 T
-0.55 (Using a single virtual machine leads to higher overheads) 335.78 134.33 P
0.62 0.01 (than in the comparable uniprocessor Pmake workload. The) 317.78 122.33 B
0.15 (increase is primarily due to additional idle time. The execu-) 317.78 110.33 P
0 (tion of the operating system in general and of the critical re-) 317.78 98.33 P
-0.39 (gions in particular is slower on top of Disco, which increases) 317.78 86.33 P
317.78 72 558 738 C
318.01 405 557.77 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 47 45 312 224 265 179 318.56 573 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/sosp97/figures/scalability-bw.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 47 45 312 224
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 1.000000 G9
172.3 206.064 186.473 206.064 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 206.064 186.473 206.064 
L9 grestore
gsave 1.000000 G9
172.3 198.264 186.473 198.264 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 198.264 186.473 198.264 
L9 grestore
6 /Helvetica SetTxt
( Idle) 0 187.891 200.364 TXL
72 72 S9
[] 1.000000 SL
172.3 198.264 186.473 198.264 
186.473 72 
172.3 72 
F9
gsave 0.0 G9 172.3 198.264 186.473 198.264 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
172.3 190.464 186.473 190.464 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 190.464 186.473 190.464 
L9 grestore
( DISCO) 0 187.891 192.564 TXL
72 72 S9
[] 1.000000 SL
gsave 0.800000 G9
172.3 190.464 186.473 190.464 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 190.464 186.473 190.464 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
172.3 182.664 186.473 182.664 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 182.664 186.473 182.664 
L9 grestore
( Sync) 0 187.891 184.764 TXL
72 72 S9
[] 1.000000 SL
gsave 0.200000 G9
172.3 182.664 186.473 182.664 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 182.664 186.473 182.664 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
172.3 174.864 186.473 174.864 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 174.864 186.473 174.864 
L9 grestore
( Kernel) 0 187.891 176.964 TXL
72 72 S9
[] 1.000000 SL
gsave 0.900000 G9
172.3 174.864 186.473 174.864 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 174.864 186.473 174.864 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
172.3 167.064 186.473 167.064 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 167.064 186.473 167.064 
L9 grestore
( User_stall) 0 187.891 169.164 TXL
72 72 S9
[] 1.000000 SL
gsave 0.300000 G9
172.3 167.064 186.473 167.064 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 167.064 186.473 167.064 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
172.3 159.264 186.473 159.264 
186.473 72 
172.3 72 
F9
grestore
gsave 0.0 G9 172.3 159.264 186.473 159.264 
L9 grestore
( User) 0 187.891 161.364 TXL
72 72 S9
83.8 72 M9
83.8 149.293 M9
95.6 149.293 M9
95.6 72 M9
107.4 72 M9
107.4 177.234 M9
119.2 177.234 M9
119.2 72 M9
131 72 M9
131 142.854 M9
142.8 142.854 M9
142.8 72 M9
154.6 72 M9
154.6 121.088 M9
166.4 121.088 M9
166.4 72 M9
178.2 72 M9
178.2 118.159 M9
190 118.159 M9
190 72 M9
201.8 72 M9
201.8 138.263 M9
213.6 138.263 M9
213.6 72 M9
237.2 72 M9
237.2 149.293 M9
249 149.293 M9
249 72 M9
260.8 72 M9
260.8 98.2176 M9
272.6 98.2176 M9
272.6 72 M9
gsave
D9
grestore
gsave 1.000000 G9
272.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.8 72 M9
83.8 137.645 M9
95.6 137.645 M9
95.6 72 M9
107.4 72 M9
107.4 158.158 M9
119.2 158.158 M9
119.2 72 M9
131 72 M9
131 134.638 M9
142.8 134.638 M9
142.8 72 M9
154.6 72 M9
154.6 115.732 M9
166.4 115.732 M9
166.4 72 M9
178.2 72 M9
178.2 108.327 M9
190 108.327 M9
190 72 M9
201.8 72 M9
201.8 109.1 M9
213.6 109.1 M9
213.6 72 M9
237.2 72 M9
237.2 132.049 M9
249 132.049 M9
249 72 M9
260.8 72 M9
260.8 98.2176 M9
272.6 98.2176 M9
272.6 72 M9
gsave
D9
grestore
272.6 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
83.8 72 M9
83.8 137.645 M9
95.6 137.645 M9
95.6 72 M9
107.4 72 M9
107.4 140.149 M9
119.2 140.149 M9
119.2 72 M9
131 72 M9
131 118.236 M9
142.8 118.236 M9
142.8 72 M9
154.6 72 M9
154.6 103.11 M9
166.4 103.11 M9
166.4 72 M9
178.2 72 M9
178.2 97.4911 M9
190 97.4911 M9
190 72 M9
201.8 72 M9
201.8 97.9626 M9
213.6 97.9626 M9
213.6 72 M9
237.2 72 M9
237.2 132.049 M9
249 132.049 M9
249 72 M9
260.8 72 M9
260.8 95.3655 M9
272.6 95.3655 M9
272.6 72 M9
gsave
D9
grestore
gsave 0.800000 G9
272.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.8 72 M9
83.8 120.068 M9
95.6 120.068 M9
95.6 72 M9
107.4 72 M9
107.4 120.571 M9
119.2 120.571 M9
119.2 72 M9
131 72 M9
131 108.59 M9
142.8 108.59 M9
142.8 72 M9
154.6 72 M9
154.6 100.699 M9
166.4 100.699 M9
166.4 72 M9
178.2 72 M9
178.2 96.7877 M9
190 96.7877 M9
190 72 M9
201.8 72 M9
201.8 97.1974 M9
213.6 97.1974 M9
213.6 72 M9
237.2 72 M9
237.2 128.168 M9
249 128.168 M9
249 72 M9
260.8 72 M9
260.8 95.3655 M9
272.6 95.3655 M9
272.6 72 M9
gsave
D9
grestore
gsave 0.200000 G9
272.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.8 72 M9
83.8 93.7424 M9
95.6 93.7424 M9
95.6 72 M9
107.4 72 M9
107.4 94.0516 M9
119.2 94.0516 M9
119.2 72 M9
131 72 M9
131 92.1811 M9
142.8 92.1811 M9
142.8 72 M9
154.6 72 M9
154.6 90.9985 M9
166.4 90.9985 M9
166.4 72 M9
178.2 72 M9
178.2 90.0633 M9
190 90.0633 M9
190 72 M9
201.8 72 M9
201.8 89.8159 M9
213.6 89.8159 M9
213.6 72 M9
237.2 72 M9
237.2 110.971 M9
249 110.971 M9
249 72 M9
260.8 72 M9
260.8 95.3655 M9
272.6 95.3655 M9
272.6 72 M9
gsave
D9
grestore
gsave 0.900000 G9
272.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
83.8 72 M9
83.8 86.1523 M9
95.6 86.1523 M9
95.6 72 M9
107.4 72 M9
107.4 86.1677 M9
119.2 86.1677 M9
119.2 72 M9
131 72 M9
131 86.16 M9
142.8 86.16 M9
142.8 72 M9
154.6 72 M9
154.6 86.1909 M9
166.4 86.1909 M9
166.4 72 M9
178.2 72 M9
178.2 86.2295 M9
190 86.2295 M9
190 72 M9
201.8 72 M9
201.8 86.2295 M9
213.6 86.2295 M9
213.6 72 M9
237.2 72 M9
237.2 88.0923 M9
249 88.0923 M9
249 72 M9
260.8 72 M9
260.8 83.9881 M9
272.6 83.9881 M9
272.6 72 M9
gsave
D9
grestore
gsave 0.300000 G9
272.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.200000 SL
284.4 72 M9
gsave 0.000000 0.000000 0.000000 setrgbcolor
D9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
6 /Helvetica SetTxt
(0) 0 69 70.2 TXR
4 /Helvetica SetTxt
(|) -90 72 87.4585 TXC
6 /Helvetica SetTxt
(20) 0 69 85.6585 TXR
4 /Helvetica SetTxt
(|) -90 72 102.917 TXC
6 /Helvetica SetTxt
(40) 0 69 101.117 TXR
4 /Helvetica SetTxt
(|) -90 72 118.376 TXC
6 /Helvetica SetTxt
(60) 0 69 116.576 TXR
4 /Helvetica SetTxt
(|) -90 72 133.834 TXC
6 /Helvetica SetTxt
(80) 0 69 132.034 TXR
4 /Helvetica SetTxt
(|) -90 72 149.293 TXC
6 /Helvetica SetTxt
(100) 0 69 147.493 TXR
4 /Helvetica SetTxt
(|) -90 72 164.751 TXC
6 /Helvetica SetTxt
(120) 0 69 162.951 TXR
4 /Helvetica SetTxt
(|) -90 72 180.21 TXC
6 /Helvetica SetTxt
(140) 0 69 178.41 TXR
4 /Helvetica SetTxt
(|) -90 72 195.668 TXC
6 /Helvetica SetTxt
(160) 0 69 193.868 TXR
12 /Helvetica SetTxt
(|) 180 72 208.8 TXC
4 /Helvetica SetTxt
(|) 90 284.4 72 TXC
(|) 90 284.4 87.4585 TXC
(|) 90 284.4 102.917 TXC
(|) 90 284.4 118.376 TXC
(|) 90 284.4 133.834 TXC
(|) 90 284.4 149.293 TXC
(|) 90 284.4 164.751 TXC
(|) 90 284.4 180.21 TXC
(|) 90 284.4 195.668 TXC
6 /Helvetica SetTxt
() 0 178.2 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 284.4 72 
L9
0 setlinecap
72 72 72 208.8 
L9
72 208.8 284.4 208.8 
L9
284.4 72 284.4 208.8 
L9
() 0 284.4 57 TXR
( Normalized Execution Time) 90 53.7 208.8 TXR
(IRIX) 0 89.7 65.16 TXC
(100) 0 89.7 152.029 TXC
(1VM) 0 113.3 65.16 TXC
(136) 0 113.3 179.97 TXC
(2VM) 0 136.9 65.16 TXC
(92) 0 136.9 145.59 TXC
(4VM) 0 160.5 65.16 TXC
(64) 0 160.5 123.824 TXC
(8VM) 0 184.1 65.16 TXC
(60) 0 184.1 120.895 TXC
(8VM/nfs) 0 207.7 65.16 TXC
(86) 0 207.7 140.999 TXC
8 /Helvetica-Bold SetTxt
(pmake) 0 148.7 51.48 TXC
6 /Helvetica SetTxt
(IRIX) 0 243.1 65.16 TXC
(100) 0 243.1 152.029 TXC
(SplashOS) 0 266.7 65.16 TXC
(34) 0 266.7 100.954 TXC
8 /Helvetica-Bold SetTxt
(RADIX) 0 254.9 51.48 TXC
6 /Helvetica SetTxt
() 0 89.7 58.86 TXC
() 0 89.7 145.729 TXC
() 0 113.3 58.86 TXC
() 0 113.3 173.67 TXC
() 0 136.9 58.86 TXC
() 0 136.9 139.29 TXC
() 0 160.5 58.86 TXC
() 0 160.5 117.524 TXC
() 0 184.1 58.86 TXC
() 0 184.1 114.595 TXC
() 0 207.7 58.86 TXC
() 0 207.7 134.699 TXC
8 /Helvetica-Bold SetTxt
() 0 148.7 43.08 TXC
6 /Helvetica SetTxt
() 0 243.1 58.86 TXC
() 0 243.1 145.729 TXC
() 0 266.7 58.86 TXC
() 0 266.7 94.6536 TXC
8 /Helvetica-Bold SetTxt
() 0 254.9 43.08 TXC
3 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
321.79 414 555.79 572.95 R
7 X
0 0 0 1 0 0 0 K
V
321.79 564.61 555.79 572.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
321.79 564.61 555.79 572.95 R
7 X
0 0 0 1 0 0 0 K
V
321.79 568.48 834.79 568.48 2 L
V
0.5 H
2 Z
0 X
N
318.01 405 557.77 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 7.) 321.79 557.95 T
( W) 370.68 557.95 T
(orkload Scalability Under Disco.) 382.63 557.95 T
1 F
(The) 526.53 557.95 T
2.52 (performance of the pmake and radix workloads on an) 321.79 545.95 P
-0.41 (eight-processor ccNUMA machine is normalized to the ex-) 321.79 533.95 P
1.51 (ecution time running IRIX on the bare hardware. Radix) 321.79 521.95 P
-0.03 (runs on IRIX directly on top of the hardware and on a spe-) 321.79 509.95 P
0.35 (cialized OS \050SPLASHOS\051 on top of Disco in a single vir-) 321.79 497.95 P
0.89 (tual machine. For each workload the execution is broken) 321.79 485.95 P
2.12 (down into user time, kernel time, time synchronization) 321.79 473.95 P
1.16 (time, monitor time, and the idle loop. All configurations) 321.79 461.95 P
2.88 (use the same physical resources, eight processors and) 321.79 449.95 P
0.76 (256MB of memory, but use a different number of virtual) 321.79 437.95 P
321.79 414.28 555.79 422.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
321.79 414.28 555.79 422.61 R
7 X
0 0 0 1 0 0 0 K
V
321.79 418.15 834.79 418.15 2 L
V
0.5 H
2 Z
0 X
N
318.01 405 557.77 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(machines.) 321.79 425.95 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
317.78 72 558 738 C
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 14) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.38 (the contention for semaphores and spinlocks in the operating) 54 731.33 P
0.47 (system. For this workload, the increased idle time is due to) 54 719.33 P
0.16 (additional contention on certain semaphores that protect the) 54 707.33 P
0.35 (virtual memory subsystem of IRIX, forcing more processes) 54 695.33 P
-0.49 (to be descheduled. This interaction causes a non-linear effect) 54 683.33 P
(in the overheads of virtualization.) 54 671.33 T
-0.04 (However, partitioning the problem into different virtual) 72 659.33 P
0.62 0.06 (machines significantly improves the scalability of the sys-) 54 647.33 B
-0.18 (tem. With only two virtual machines, the scalability benefits) 54 635.33 P
0.44 (already outweigh the overheads of the virtualization. When) 54 623.33 P
0.62 (using eight virtual machines, the execution time is reduced) 54 611.33 P
-0.43 (to 60% of its base execution time, primarily because of a sig-) 54 599.33 P
-0.5 (nificant reduction in the kernel stall time and kernel synchro-) 54 587.33 P
(nization.) 54 575.33 T
0.62 0.33 (We see significant performance improvement even) 72 563.33 B
0.62 0.05 (when accessing files using NFS. In the NFS configuration) 54 551.33 B
-0.39 (we see an increase in the idle time that is primarily due to the) 54 539.33 P
0.37 (serialization of NFS requests on the single server that man-) 54 527.33 P
-0.43 (ages all eight disks. Even with the overheads of the NFS pro-) 54 515.33 P
0.62 0.45 (tocol and the increase in idle time, this configuration) 54 503.33 B
(executes faster than the base IRIX time.) 54 491.33 T
0.62 0.12 (The other workload of Figure) 72 479.33 B
0.62 0.12 (7 compares the perfor-) 198.93 479.33 B
0.09 (mance of the radix sorting algorithm, one of the SPLASH-2) 54 467.33 P
0.28 (applications [27]. Radix has an unfortunate interaction with) 54 455.33 P
-0.06 (the lazy evaluation policies of the IRIX virtual memory sys-) 54 443.33 P
-0.58 (tem. IRIX defers setting up the page table entries of each par-) 54 431.33 P
-0.28 (allel thread until the memory is touched by the thread. When) 54 419.33 P
0.62 0 (the sorting phase starts, all threads suffer many page faults) 54 407.33 B
-0.19 (on the same region causing serialization on the various spin-) 54 395.33 P
0.62 0.05 (locks and semaphores used to protect virtual memory data) 54 383.33 B
-0.49 (structures. The contention makes the execution of these traps) 54 371.33 P
0.62 0.05 (significant in comparison to the work Radix does for each) 54 359.33 B
-0.13 (page touched. The result is Radix spends one half of its time) 54 347.33 P
(in the operating system.) 54 335.33 T
-0.28 (Although it would not have been difficult to modify Ra-) 72 323.33 P
-0.34 (dix to setup its threads differently to avoid this problem, oth-) 54 311.33 P
0.62 0.1 (er examples are not as easy to fix. Rather than modifying) 54 299.33 B
-0.25 (Radix, we ran it on top of SPLASHOS rather than IRIX. Be-) 54 287.33 P
0 (cause it does not manage virtual memory, SPLASHOS does) 54 275.33 P
0.62 0.15 (not suffer from the same performance problems as IRIX.) 54 263.33 B
0.62 0.15 (Figure) 54 251.33 B
0.62 0.15 (7 shows the drastic performance improvements of) 83.63 251.33 B
-0.38 (running the application in a specialized operating system \050on) 54 239.33 P
0.62 0.3 (top of Disco\051 over using a full-blown operating system) 54 227.33 B
0.62 0.05 (\050without Disco\051. Both configurations suffer from the same) 54 215.33 B
0.41 (number of page faults, whose processing accounts for most) 54 203.33 P
0.17 (of the system time. This system time is one order of magni-) 54 191.33 P
-0.17 (tude larger for IRIX than it is for SPLASHOS on top of Dis-) 54 179.33 P
0.62 0.43 (co. The NUMA-aware allocation policy of Disco also) 54 167.33 B
(reduces hot spots and improves user stall time.) 54 155.33 T
2 12 Q
(5.5  Dynamic Page Migration and Replication) 54 129 T
1 10 Q
0 (To show the benefits of Disco\325s page migration and replica-) 54 112.33 P
0.62 0.01 (tion implementation, we concentrate on workloads that ex-) 54 100.33 B
0.62 0.56 (hibit poor memory system behavior, specifically the) 54 88.33 B
0.62 0.34 (Engineering and Raytrace workloads. The Engineering) 54 76.33 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
-0.04 (workload consists of six Verilog simulations and six memo-) 317.78 443.33 P
-0.44 (ry system simulations on eight processors of the same virtual) 317.78 431.33 P
0.62 0.03 (machine. The Raytrace workload spans 16 processors. Be-) 317.78 419.33 B
-0.47 (cause Raytrace\325s largest available data set fully fits in a 1MB) 317.78 407.33 P
-0.28 (cache, we ran the Raytrace experiments with a 256KB cache) 317.78 395.33 P
(to show the impact of data locality.) 317.78 383.33 T
0.56 (Figure) 335.78 371.33 P
0.56 (8 shows the overall reduction in execution time) 364.39 371.33 P
0.03 (of the workload. Each workload is run under IRIX, IRIX on) 317.78 359.33 P
0.58 (Disco with migration and replication, and IRIX on a UMA) 317.78 347.33 P
-0.09 (memory system. The UMA memory system has a latency of) 317.78 335.33 P
-0.4 (300ns equivalent to the local latency of the NUMA machine.) 317.78 323.33 P
0.62 0.12 (As a result, the performance on the UMA machine deter-) 317.78 311.33 B
0.58 (mines a lower bound for the execution time on the NUMA) 317.78 299.33 P
0.62 0.12 (machine. The comparison between Disco and the NUMA) 317.78 287.33 B
0.43 (IRIX run shows the benefits of page migration and replica-) 317.78 275.33 P
0.62 0.06 (tion while the comparison with the UMA IRIX run shows) 317.78 263.33 B
0 (how close Disco got to completely hiding the NUMA mem-) 317.78 251.33 P
(ory system from the workload.) 317.78 239.33 T
0.62 0.04 (Disco achieves significant performance improvements) 335.78 227.33 B
0.62 (by enhancing the memory locality of these workloads. The) 317.78 215.33 P
0.62 0.16 (Engineering workload sees a 33% performance improve-) 317.78 203.33 B
-0.59 (ment while Raytrace gets a 38% improvement. Both user and) 317.78 191.33 P
-0.4 (kernel modes see a substantial reduction in remote stall time.) 317.78 179.33 P
-0.19 (Disco increases data locality by satisfying a large fraction of) 317.78 167.33 P
0.62 0.04 (the cache misses from local memory with only a small in-) 317.78 155.33 B
(crease in Disco\325s overhead.) 317.78 143.33 T
-0.55 (Although Disco cannot totally hide all the NUMA mem-) 335.78 131.33 P
-0.22 (ory latencies from the kernel, it does greatly improve the sit-) 317.78 119.33 P
0.62 0.22 (uation. Comparing Disco\325s performance with that of the) 317.78 107.33 B
0.25 (optimistic UMA where all cache misses are satisfied in 300) 317.78 95.33 P
0.51 (nanoseconds, Disco comes within 40% for the Engineering) 317.78 83.33 P
317.78 450 557.54 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 47 45 312 224 265 179 319.44 573 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/sosp97/figures/mrbar-bw.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 47 45 312 224
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
246.471 206.064 260.645 206.064 
260.645 72 
246.471 72 
F9
gsave 0.0 G9 246.471 206.064 260.645 206.064 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
246.471 198.264 260.645 198.264 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 198.264 260.645 198.264 
L9 grestore
6 /Helvetica SetTxt
( DISCO) 0 262.062 200.364 TXL
72 72 S9
[] 1.000000 SL
gsave 0.950000 G9
246.471 198.264 260.645 198.264 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 198.264 260.645 198.264 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
246.471 190.464 260.645 190.464 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 190.464 260.645 190.464 
L9 grestore
( remote) 0 262.062 192.564 TXL
72 72 S9
[] 1.000000 SL
gsave 0.300000 G9
246.471 190.464 260.645 190.464 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 190.464 260.645 190.464 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
246.471 182.664 260.645 182.664 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 182.664 260.645 182.664 
L9 grestore
( local) 0 262.062 184.764 TXL
72 72 S9
[] 1.000000 SL
gsave 0.800000 G9
246.471 182.664 260.645 182.664 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 182.664 260.645 182.664 
L9 grestore
[] 1.000000 SL
gsave 1.000000 G9
246.471 174.864 260.645 174.864 
260.645 72 
246.471 72 
F9
grestore
gsave 0.0 G9 246.471 174.864 260.645 174.864 
L9 grestore
( exec) 0 262.062 176.964 TXL
72 72 S9
[] 1.000000 SL
87.1714 72 M9
87.1714 196.364 M9
102.343 196.364 M9
102.343 72 M9
117.514 72 M9
117.514 155.336 M9
132.686 155.336 M9
132.686 72 M9
147.857 72 M9
147.857 132.204 M9
163.029 132.204 M9
163.029 72 M9
193.371 72 M9
193.371 196.376 M9
208.543 196.376 M9
208.543 72 M9
223.714 72 M9
223.714 148.707 M9
238.886 148.707 M9
238.886 72 M9
254.057 72 M9
254.057 133.485 M9
269.229 133.485 M9
269.229 72 M9
gsave
D9
grestore
269.229 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
87.1714 72 M9
87.1714 196.364 M9
102.343 196.364 M9
102.343 72 M9
117.514 72 M9
117.514 142.464 M9
132.686 142.464 M9
132.686 72 M9
147.857 72 M9
147.857 132.204 M9
163.029 132.204 M9
163.029 72 M9
193.371 72 M9
193.371 196.376 M9
208.543 196.376 M9
208.543 72 M9
223.714 72 M9
223.714 140.947 M9
238.886 140.947 M9
238.886 72 M9
254.057 72 M9
254.057 133.485 M9
269.229 133.485 M9
269.229 72 M9
gsave
D9
grestore
gsave 0.950000 G9
269.229 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
87.1714 72 M9
87.1714 117.778 M9
102.343 117.778 M9
102.343 72 M9
117.514 72 M9
117.514 125.924 M9
132.686 125.924 M9
132.686 72 M9
147.857 72 M9
147.857 132.204 M9
163.029 132.204 M9
163.029 72 M9
193.371 72 M9
193.371 126.658 M9
208.543 126.658 M9
208.543 72 M9
223.714 72 M9
223.714 132.055 M9
238.886 132.055 M9
238.886 72 M9
254.057 72 M9
254.057 133.485 M9
269.229 133.485 M9
269.229 72 M9
gsave
D9
grestore
gsave 0.300000 G9
269.229 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
87.1714 72 M9
87.1714 110.938 M9
102.343 110.938 M9
102.343 72 M9
117.514 72 M9
117.514 109.856 M9
132.686 109.856 M9
132.686 72 M9
147.857 72 M9
147.857 111 M9
163.029 111 M9
163.029 72 M9
193.371 72 M9
193.371 124.382 M9
208.543 124.382 M9
208.543 72 M9
223.714 72 M9
223.714 123.648 M9
238.886 123.648 M9
238.886 72 M9
254.057 72 M9
254.057 124.258 M9
269.229 124.258 M9
269.229 72 M9
gsave
D9
grestore
gsave 0.800000 G9
269.229 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.200000 SL
284.4 72 M9
gsave 0.000000 0.000000 0.000000 setrgbcolor
D9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
6 /Helvetica SetTxt
(0) 0 69 70.2 TXR
4 /Helvetica SetTxt
(|) -90 72 96.8727 TXC
6 /Helvetica SetTxt
(20) 0 69 95.0727 TXR
4 /Helvetica SetTxt
(|) -90 72 121.745 TXC
6 /Helvetica SetTxt
(40) 0 69 119.945 TXR
4 /Helvetica SetTxt
(|) -90 72 146.618 TXC
6 /Helvetica SetTxt
(60) 0 69 144.818 TXR
4 /Helvetica SetTxt
(|) -90 72 171.491 TXC
6 /Helvetica SetTxt
(80) 0 69 169.691 TXR
4 /Helvetica SetTxt
(|) -90 72 196.364 TXC
6 /Helvetica SetTxt
(100) 0 69 194.564 TXR
12 /Helvetica SetTxt
(|) 180 72 208.8 TXC
4 /Helvetica SetTxt
(|) 90 284.4 72 TXC
(|) 90 284.4 96.8727 TXC
(|) 90 284.4 121.745 TXC
(|) 90 284.4 146.618 TXC
(|) 90 284.4 171.491 TXC
(|) 90 284.4 196.364 TXC
6 /Helvetica SetTxt
() 0 178.2 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 284.4 72 
L9
0 setlinecap
72 72 72 208.8 
L9
72 208.8 284.4 208.8 
L9
284.4 72 284.4 208.8 
L9
() 0 284.4 57 TXR
( Normalized Execution Time) 90 53.7 208.8 TXR
(16%) 0 94.7571 65.16 TXC
(IRIX) 0 94.7571 58.32 TXC
(100) 0 94.7571 199.1 TXC
(78%) 0 125.1 65.16 TXC
(DISCO) 0 125.1 58.32 TXC
(67) 0 125.1 158.072 TXC
(100%) 0 155.443 65.16 TXC
(UMA) 0 155.443 58.32 TXC
(48) 0 155.443 134.94 TXC
8 /Helvetica-Bold SetTxt
(Engineering) 0 125.1 47.376 TXC
6 /Helvetica SetTxt
(6%) 0 200.957 65.16 TXC
(IRIX) 0 200.957 58.32 TXC
(100) 0 200.957 199.112 TXC
(76%) 0 231.3 65.16 TXC
(DISCO) 0 231.3 58.32 TXC
(62) 0 231.3 151.443 TXC
(100%) 0 261.643 65.16 TXC
(UMA) 0 261.643 58.32 TXC
(49) 0 261.643 136.221 TXC
8 /Helvetica-Bold SetTxt
(Raytrace) 0 231.3 47.376 TXC
6 /Helvetica SetTxt
() 0 94.7571 58.86 TXC
() 0 94.7571 52.02 TXC
() 0 94.7571 192.8 TXC
() 0 125.1 58.86 TXC
() 0 125.1 52.02 TXC
() 0 125.1 151.772 TXC
() 0 155.443 58.86 TXC
() 0 155.443 52.02 TXC
() 0 155.443 128.64 TXC
8 /Helvetica-Bold SetTxt
() 0 125.1 38.976 TXC
6 /Helvetica SetTxt
() 0 200.957 58.86 TXC
() 0 200.957 52.02 TXC
() 0 200.957 192.812 TXC
() 0 231.3 58.86 TXC
() 0 231.3 52.02 TXC
() 0 231.3 145.143 TXC
() 0 261.643 58.86 TXC
() 0 261.643 52.02 TXC
() 0 261.643 129.921 TXC
8 /Helvetica-Bold SetTxt
() 0 231.3 38.976 TXC
3 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
318.78 457 552.78 574 R
7 X
0 0 0 1 0 0 0 K
V
318.78 565.67 552.78 574 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.78 565.67 552.78 574 R
7 X
0 0 0 1 0 0 0 K
V
318.78 569.54 831.78 569.54 2 L
V
0.5 H
2 Z
0 X
N
317.78 450 557.54 738 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
1.83 (FIGURE 8.) 318.78 559 P
1.83 ( Performance Bene\336ts of Page Migration) 369.5 559 P
(and Replication.) 318.78 547 T
1 F
-0.08 (For each workload, the figure compares) 393.79 547 P
0.43 (the execution time of IRIX on NUMA, IRIX on Disco on) 318.78 535 P
0.4 (NUMA with page migration and replication, and IRIX on) 318.78 523 P
-0.43 (an bus-based UMA, The execution time is divided between) 318.78 511 P
-0.42 (instruction execution time, local memory stall time, remote) 318.78 499 P
-0.05 (memory stall time, and Disco overhead. The percentage of) 318.78 487 P
318.78 463.33 552.78 471.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.78 463.33 552.78 471.67 R
7 X
0 0 0 1 0 0 0 K
V
318.78 467.2 831.78 467.2 2 L
V
0.5 H
2 Z
0 X
N
317.78 450 557.54 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(cache misses satisfied locally is shown below each bar.) 318.78 475 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 15) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(workload and 26% for Raytrace.) 54 605.33 T
0.62 0.04 (Our implementation of page migration and replication) 72 593.33 B
0.62 0.21 (in Disco is significantly faster than a comparable kernel) 54 581.33 B
0.62 0.12 (implementation) 54 569.33 B
0.62 0.12 ([26]. This improvement is due to Disco\325s) 121.05 569.33 B
0.62 0.04 (streamlined data structures and optimized TLB shootdown) 54 557.33 B
-0.36 (mechanisms. As a result, Disco can be more aggressive in its) 54 545.33 P
0.62 0.16 (policy decisions and provide better data locality. Table) 54 533.33 B
0.62 0.16 (3) 289.22 533.33 B
0 (lists the frequency and latency of page migrations and repli-) 54 521.33 P
(cations for both workloads.) 54 509.33 T
2 14 Q
(6) 54 480.42 T
(Related W) 72 480.42 T
(ork) 134.61 480.42 T
1 10 Q
0.03 (We start by comparing Disco\325s approach to building system) 54 460.08 P
0.62 0.23 (software for large-scale shared-memory multiprocessors) 54 448.08 B
0.62 0 (with other research and commercial projects that target the) 54 436.08 B
0.62 0.01 (same class of machines. We then compare Disco to virtual) 54 424.08 B
0.62 0.01 (machine monitors and to other system software structuring) 54 412.08 B
0.39 (techniques. Finally, we compare our implementation of dy-) 54 400.08 P
(namic page migration and replication with previous work.) 54 388.08 T
2 12 Q
(6.1  System Softwar) 54 361.75 T
(e for Scalable Shar) 155.1 361.75 T
(ed) 251.88 361.75 T
(Memory Machines) 54 347.75 T
1 10 Q
0.62 0.03 (Two opposite approaches are currently being taken to deal) 54 331.08 B
0.62 0.26 (with the system software challenges of scalable shared-) 54 319.08 B
-0.5 (memory multiprocessors. The first one is to throw a large OS) 54 307.08 P
0.62 0.08 (development effort at the problem and effectively address) 54 295.08 B
0.62 0.04 (these challenges in the operating system. Examples of this) 54 283.08 B
-0.37 (approach are the Hive [5] and Hurricane [25] research proto-) 54 271.08 P
0.62 0.02 (types and the Cellular-IRIX system recently announced by) 54 259.08 B
0.51 (SGI. These multi-kernel operating systems handle the scal-) 54 247.08 P
0.38 (ability of the machine by partitioning resources into \322cells\323) 54 235.08 P
0.62 0.12 (that communicate to manage the hardware resources effi-) 54 223.08 B
0.2 (ciently and export a single system image, effectively hiding) 54 211.08 P
0.62 0.04 (the distributed system from the user. In Hive, the cells are) 54 199.08 B
0.62 0.05 (also used to contain faults within cell boundaries. In addi-) 54 187.08 B
0.62 0.34 (tion, these systems incorporate resource allocators and) 54 175.08 B
0.62 0.07 (schedulers for processors and memory that can handle the) 54 163.08 B
0.34 (scalability and the NUMA aspects of the machine. This ap-) 54 151.08 P
-0.74 (proach is innovative, but requires a large development effort.) 54 139.08 P
-0.05 (The virtual machines of Disco are similar to the cells of) 72 127.08 P
0.59 (Hive and Cellular-IRIX in that they support scalability and) 54 115.08 P
0.62 0.14 (form system software fault containment boundaries. Like) 54 103.08 B
(these systems, Disco can balance the allocation of resources) 54 91.08 T
0.06 (such as processors and memory between these units of scal-) 54 79.08 P
54 72 294.22 738 C
54 612 291.6 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.67 637.68 290.33 763.68 R
7 X
0 0 0 1 0 0 0 K
V
2 9 Q
0 X
(Action) 71.5 715.18 T
(Engineering) 132.22 723.68 T
(Raytrace) 227.97 723.68 T
(num / sec) 115.28 706.68 T
(avg time) 161.78 706.68 T
(num / sec) 205.03 706.68 T
(avg time) 251.53 706.68 T
1 F
(Migration) 60.66 692.68 T
(2461) 134.72 692.68 T
(67) 177.66 692.68 T
3 F
(m) 188.91 692.68 T
1 F
(s) 194.09 692.68 T
(909) 228.96 692.68 T
(102) 262.9 692.68 T
3 F
(m) 278.65 692.68 T
1 F
(s) 283.83 692.68 T
2 10 Q
(T) 55.67 663.02 T
(able 3.) 61.42 663.02 T
( Action taken on hot pages.) 89.2 663.02 T
1 F
-0.45 (This table shows the) 209.76 663.02 P
-0.17 (number of migrations and replications per second and their) 55.67 652.02 P
55.67 629.35 290.33 637.68 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.67 629.35 290.33 637.68 R
7 X
0 0 0 1 0 0 0 K
V
55.67 633.22 568.67 633.22 2 L
V
0.5 H
2 Z
0 X
N
54 612 291.6 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(average latency for the two workloads.) 55.67 641.02 T
1 9 Q
(Replication) 60.66 679.68 T
(2208) 134.72 679.68 T
(57) 177.66 679.68 T
3 F
(m) 188.91 679.68 T
1 F
(s) 194.09 679.68 T
(2671) 224.46 679.68 T
(73) 267.4 679.68 T
3 F
(m) 278.65 679.68 T
1 F
(s) 283.83 679.68 T
57.66 735.43 57.66 675.93 2 L
V
0.5 H
0 Z
N
110.85 735.93 110.85 675.43 2 L
V
N
155.72 718.93 155.72 675.43 2 L
V
N
200.59 735.93 200.59 675.43 2 L
V
N
245.46 718.93 245.46 675.43 2 L
V
N
290.33 735.43 290.33 675.93 2 L
V
N
57.41 735.68 290.58 735.68 2 L
V
N
110.6 718.68 290.58 718.68 2 L
V
N
57.41 701.68 290.58 701.68 2 L
V
N
57.41 688.68 290.58 688.68 2 L
V
N
57.41 675.68 290.58 675.68 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
54 72 294.22 738 C
0 0 612 792 C
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.62 0.04 (ability. Also like these systems, Disco handles the NUMA) 317.78 731.33 B
0.62 0.02 (memory management by doing careful page migration and) 317.78 719.33 B
0.62 0 (replication. The benefit of Disco over the OS intensive ap-) 317.78 707.33 B
0.39 (proach is in the reduction in OS development effort. It pro-) 317.78 695.33 P
0.62 0.08 (vides a large fraction of the benefits of these systems at a) 317.78 683.33 B
-0.28 (fraction of the cost. Unlike the OS-intensive approach that is) 317.78 671.33 P
-0.34 (tied to a particular operating system, Disco is independent of) 317.78 659.33 P
-0.09 (any particular OS, and can even support different OSes con-) 317.78 647.33 P
(currently.) 317.78 635.33 T
0.62 0.1 (The second approach is to statically partition the ma-) 335.78 623.33 B
0.59 (chine and run multiple, independent operating systems that) 317.78 611.33 P
0.62 0.12 (use distributed system protocols to export a partial single) 317.78 599.33 B
0.62 0.03 (system image to the users. An example of this approach is) 317.78 587.33 B
-0.56 (the Sun Enterprise10000 machine that handles software scal-) 317.78 575.33 P
-0.62 (ability and hardware reliability by allowing users to hard par-) 317.78 563.33 P
0.62 0.43 (tition the machine into independent failure units each) 317.78 551.33 B
0.62 0.05 (running a copy of the Solaris operating system. Users still) 317.78 539.33 B
0.62 0.05 (benefit from the tight coupling of the machine, but cannot) 317.78 527.33 B
-0.5 (dynamically adapt the partitioning to the load of the different) 317.78 515.33 P
0.62 0.16 (units. This approach favors low implementation cost and) 317.78 503.33 B
(compatibility over innovation.) 317.78 491.33 T
-0.39 (Like the hard partitioning approach, Disco only requires) 335.78 479.33 P
-0.16 (minimal OS changes. Although short of providing a full sin-) 317.78 467.33 P
-0.1 (gle system image, both systems build a partial single system) 317.78 455.33 P
0.27 (image using standard distributed systems protocols. For ex-) 317.78 443.33 P
-0.61 (ample, a single file system image is built using NFS. A single) 317.78 431.33 P
0.62 0.05 (system administration interface is built using NIS. System) 317.78 419.33 B
0.62 0.1 (administration is simplified in Disco by the use of shared) 317.78 407.33 B
0.62 0.2 (copy-on-write disks that are shared by many virtual ma-) 317.78 395.33 B
(chines.) 317.78 383.33 T
0.62 0.1 (Yet, unlike the hard partitioning approach, Disco can) 335.78 371.33 B
-0.49 (share all the resources between the virtual machines and sup-) 317.78 359.33 P
0.62 0.08 (ports highly dynamic reconfiguration of the machine. The) 317.78 347.33 B
0.42 (support of a shared buffer cache and the ability to schedule) 317.78 335.33 P
0.62 0.19 (all the resources of the machine between the virtual ma-) 317.78 323.33 B
0.62 0.07 (chines allows Disco to excel on workloads that would not) 317.78 311.33 B
0.62 0.1 (perform well with a relatively static partitioning. Further-) 317.78 299.33 B
0.62 0.02 (more, Disco provides the ability for a single application to) 317.78 287.33 B
-0.62 (span all resources of the machine using a specialized scalable) 317.78 275.33 P
(OS.) 317.78 263.33 T
-0.5 (Digital\325s announced Galaxies operating system, a multi-) 335.78 251.33 P
-0.56 (kernel version of VMS, also partitions the machine relatively) 317.78 239.33 P
0.62 (statically like the Sun machine, with the additional support) 317.78 227.33 P
-0.04 (for segment drivers that allow applications to share memory) 317.78 215.33 P
0 (across partitions. Galaxies reserves a portion of the physical) 317.78 203.33 P
0.22 (memory of the machine for this purpose. A comparable im-) 317.78 191.33 P
0.62 0.08 (plementation of application-level shared memory between) 317.78 179.33 B
-0.62 (virtual machines would be simple and would not require hav-) 317.78 167.33 P
(ing to reserve memory in advance.) 317.78 155.33 T
0.62 0.09 (Disco is a compromise between the OS-intensive and) 335.78 143.33 B
0.19 (the OS-light approaches. Given an infinite OS development) 317.78 131.33 P
0.32 (budget, the OS is the right place to deal with issues such as) 317.78 119.33 P
0 (resource management. The high-level knowledge and great-) 317.78 107.33 P
0.62 0.03 (er control available in the operating system can allow it to) 317.78 95.33 B
0.62 0.12 (export a single system image and develop better resource) 317.78 83.33 B
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 16) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.33 (management mechanisms and policies. Fortunately, Disco is) 54 731.33 P
0.62 0.08 (capable of gradually getting out of the way as the OS im-) 54 719.33 B
-0.52 (proves. Operating systems with improved scalability can just) 54 707.33 P
-0.12 (request larger virtual machines that manage more of the ma-) 54 695.33 P
0.28 (chine\325s resources. Disco provides an adequate and low-cost) 54 683.33 P
-0.32 (solution that enables a smooth transition and maintains com-) 54 671.33 P
(patibility with commodity operating systems.) 54 659.33 T
2 12 Q
(6.2  V) 54 633 T
(irtual Machine Monitors) 83.22 633 T
1 10 Q
0.43 (Disco is a virtual machine monitor that implements in soft-) 54 616.33 P
-0.14 (ware a virtual machine identical to the underlying hardware.) 54 604.33 P
0.15 (The approach itself is far from being novel. Golberg\325s 1974) 54 592.33 P
0.42 (survey paper [13] lists over 70 research papers on the topic) 54 580.33 P
0 (and IBM\325s VM/370 [15] system was introduced in the same) 54 568.33 P
-0.34 (period. Disco shares the same approach and features as these) 54 556.33 P
0.62 0.01 (systems, and includes many of the same performance opti-) 54 544.33 B
0.13 (mizations as VM/370 [8]. Both allow the simultaneous exe-) 54 532.33 P
0.62 0.01 (cution of independent operating systems by virtualizing all) 54 520.33 B
-0.46 (the hardware resources. Both can attach I/O devices to single) 54 508.33 P
-0.42 (virtual machines in an exclusive mode. VM/370 mapped vir-) 54 496.33 P
-0.35 (tual disks to distinct volumes \050partitions\051, whereas Disco has) 54 484.33 P
0 (the notion of shared copy-on-write disks. Both systems sup-) 54 472.33 P
0.48 (port a combination of persistent disks and temporary disks.) 54 460.33 P
0.22 (Interestingly, Creasy argues in his 1981 paper that the tech-) 54 448.33 P
-0.08 (nology developed to interconnect virtual machines will later) 54 436.33 P
-0.14 (allow the interconnection of real machines [8]. The opposite) 54 424.33 P
(occurred and Disco benefits today from the advances in dis-) 54 412.33 T
(tributed systems protocols.) 54 400.33 T
-0.12 (The basic approach used in Disco as well as many of its) 72 388.33 P
-0.4 (performance optimizations were present in VM/370 and oth-) 54 376.33 P
0.62 0.01 (er virtual machines. Disco differs in its support of scalable) 54 364.33 B
-0.61 (shared-memory multiprocessors, handling of modern operat-) 54 352.33 P
-0.49 (ing systems, and the transparent sharing capabilities of copy-) 54 340.33 P
(on-write disks and the global buffer cache.) 54 328.33 T
-0.34 (The idea of virtual machines remains popular to provide) 72 316.33 P
0.6 (backward compatibility for legacy applications or architec-) 54 304.33 P
0.62 0.04 (tures. Microsoft\325s Windows 95 operating system [16] uses) 54 292.33 B
0.4 (virtual machines to run older Windows 3.1 and DOS appli-) 54 280.33 P
0.5 (cations. Disco differs in that it runs all the system software) 54 268.33 P
0.62 0.16 (in a virtual machine and not just the legacy applications.) 54 256.33 B
0.62 0 (DAISY [10] uses dynamic compilation techniques to run a) 54 244.33 B
0.31 (single virtual machine with a different instruction set archi-) 54 232.33 P
0.62 0.02 (tecture than the host processor. Disco exports the same in-) 54 220.33 B
0.62 0.06 (struction set as the underlying hardware and can therefore) 54 208.33 B
(use direct execution rather than dynamic compilation.) 54 196.33 T
0.62 0.13 (Virtual machine monitors have been recently used to) 72 184.33 B
0.62 0.09 (provide fault-tolerance to sensitive applications [3]. Bres-) 54 172.33 B
0.62 0.23 (soud and Schneider\325s system virtualizes only certain re-) 54 160.33 B
0.62 0.85 (sources of the machine, specifically the interrupt) 54 148.33 B
0.61 (architecture. By running the OS in supervisor mode, it dis-) 54 136.33 P
0.62 0.07 (ables direct access to I/O resources and physical memory,) 54 124.33 B
0.09 (without having to virtualize them. While this is sufficient to) 54 112.33 P
0.51 (provide fault-tolerance, it does not allow concurrent virtual) 54 100.33 P
(machines to coexist.) 54 88.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(6.3  Other System Softwar) 317.78 730 T
(e Structuring) 452.54 730 T
(T) 317.78 716 T
(echniques) 324.68 716 T
1 10 Q
0.62 0.04 (As an operating system structuring technique, Disco could) 317.78 699.33 B
0.62 0 (be described as a microkernel with an unimaginative inter-) 317.78 687.33 B
0.14 (face. Rather than developing the clean and elegant interface) 317.78 675.33 P
0.21 (used by microkernels, Disco simply mirrors the interface of) 317.78 663.33 P
0.62 0.05 (the raw hardware. By supporting different commodity and) 317.78 651.33 B
-0.36 (specialized operating systems, Disco also shares with micro-) 317.78 639.33 P
-0.46 (kernels the idea of supporting multiple operating system per-) 317.78 627.33 P
(sonalities [1].) 317.78 615.33 T
-0.37 (It is interesting to compare Disco with Exokernel [11], a) 335.78 603.33 P
0.62 0.01 (software architecture that allows application-level resource) 317.78 591.33 B
0.62 0.11 (management. The Exokernel safely multiplexes resources) 317.78 579.33 B
0.62 0.13 (between user-level library operating systems. Both Disco) 317.78 567.33 B
-0.48 (and Exokernel support specialized operating systems such as) 317.78 555.33 P
0.62 0.26 (ExOS for the Aegis exokernel and SplashOS for Disco.) 317.78 543.33 B
0.14 (These specialized operating systems enable superior perfor-) 317.78 531.33 P
0.62 0.1 (mance since they are freed from the general overheads of) 317.78 519.33 B
-0.38 (commodity operating systems. Disco differs from Exokernel) 317.78 507.33 P
0.34 (in that it virtualizes resources rather than multiplexes them,) 317.78 495.33 P
-0.08 (and can therefore run commodity operating systems without) 317.78 483.33 P
(significant modifications.) 317.78 471.33 T
0.62 0.25 (The Fluke system [12] uses the virtual machine ap-) 335.78 459.33 B
0.62 0.05 (proach to build modular and extensible operating systems.) 317.78 447.33 B
0.08 (Recursive virtual machines are implemented by their nested) 317.78 435.33 P
-0.35 (process model, and efficiency is preserved by allowing inner) 317.78 423.33 P
0 (virtual machines to directly access the underlying microker-) 317.78 411.33 P
0.19 (nel of the machine. Ford et al. show that specialized system) 317.78 399.33 P
0 (functions such as checkpointing and migration require com-) 317.78 387.33 P
-0.08 (plete state encapsulation. Like Fluke, Disco totally encapsu-) 317.78 375.33 P
-0.22 (lates the state of virtual machines, and can therefore trivially) 317.78 363.33 P
(implement these functions.) 317.78 351.33 T
2 12 Q
(6.4  ccNUMA Memory Management) 317.78 325 T
1 10 Q
0.41 (Disco provides a complete ccNUMA memory management) 317.78 308.33 P
0.62 0.05 (facility that includes page placement as well as a dynamic) 317.78 296.33 B
0.62 0.03 (page migration and page replication policy. Dynamic page) 317.78 284.33 B
-0.4 (migration and replication was first implemented in operating) 317.78 272.33 P
0.28 (systems for machines that were not cache-coherent, such as) 317.78 260.33 P
-0.05 (the IBM Ace [2] or the BBN Butterfly [7]. In these systems,) 317.78 248.33 P
0.12 (migration and replication is triggered by page faults and the) 317.78 236.33 P
0.1 (penalty of having poor data locality is greater due to the ab-) 317.78 224.33 P
(sence of caches.) 317.78 212.33 T
0.42 (The implementation in Disco is most closely related to) 335.78 200.33 P
0.62 0.02 (our kernel implementation in [26]. Both projects target the) 317.78 188.33 B
0.55 (FLASH multiprocessor. Since the machine supports cache-) 317.78 176.33 P
0.04 (coherency, page movement is only a performance optimiza-) 317.78 164.33 P
0.12 (tion. Our policies are derived from this earlier work. Unlike) 317.78 152.33 P
0.6 (the in-kernel implementation that added NUMA awareness) 317.78 140.33 P
-0.56 (to an existing operating system, our implementation of Disco) 317.78 128.33 P
0.62 0.1 (was designed with these features in mind from the begin-) 317.78 116.33 B
(ning, resulting in lower overheads.) 317.78 104.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 17) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(7) 54 728.67 T
(Conclusions) 72 728.67 T
1 10 Q
0.62 0.05 (This paper tackles the problem of developing system soft-) 54 708.33 B
0.24 (ware for scalable shared memory multiprocessors without a) 54 696.33 P
0.12 (massive development effort. Our solution involves adding a) 54 684.33 P
0.62 0.04 (level of indirection between commodity operating systems) 54 672.33 B
0.03 (and the raw hardware. This level of indirection uses another) 54 660.33 P
-0.06 (old idea, virtual machine monitors, to hide the novel aspects) 54 648.33 P
(of the machine such as its size and NUMA-ness.) 54 636.33 T
0.62 0.08 (In a prototype implementation called Disco, we show) 72 624.33 B
-0.31 (that many of the problems of traditional virtual machines are) 54 612.33 P
0.62 0.02 (no longer significant. Our experiments show that the over-) 54 600.33 B
-0.37 (heads imposed by the virtualization are modest both in terms) 54 588.33 P
-0.22 (of processing time and memory footprint. Disco uses a com-) 54 576.33 P
0.62 0.13 (bination of innovative emulation of the DMA engine and) 54 564.33 B
-0.25 (standard distributed file system protocols to support a global) 54 552.33 P
0.62 0.12 (buffer cache that is transparently shared across all virtual) 54 540.33 B
-0.16 (machines. We show how the approach provides a simple so-) 54 528.33 P
0.11 (lution to the scalability, reliability and NUMA management) 54 516.33 P
0.62 0.03 (problems otherwise faced by the system software of large-) 54 504.33 B
(scale machines.) 54 492.33 T
-0.55 (Although Disco was designed to exploit shared-memory) 72 480.33 P
0.62 0.09 (multiprocessors, the techniques it uses also apply to more) 54 468.33 B
0.04 (loosely-coupled environments such as networks of worksta-) 54 456.33 P
0.62 0.14 (tions \050NOW\051. Operations that are difficult to retrofit into) 54 444.33 B
-0.08 (clusters of existing operating systems such as checkpointing) 54 432.33 P
-0.06 (and process migration can be easily supported with a Disco-) 54 420.33 P
0.62 0.01 (like monitor. As with shared-memory multiprocessors, this) 54 408.33 B
-0.03 (can be done with a low implementation cost and using com-) 54 396.33 P
(modity operating systems.) 54 384.33 T
0.62 0.05 (This return to virtual machine monitors is driven by a) 72 372.33 B
0.04 (current trend in computer systems. While operating systems) 54 360.33 P
0 (and application programs continue to grow in size and com-) 54 348.33 P
-0.2 (plexity, the machine-level interface has remained fairly sim-) 54 336.33 P
-0.06 (ple. Software written to operate at this level remains simple,) 54 324.33 P
-0.59 (yet provides the necessary compatibility to leverage the large) 54 312.33 P
0.62 0.25 (existing body of operating systems and application pro-) 54 300.33 B
0.17 (grams. We are interested in further exploring the use of vir-) 54 288.33 P
0.62 0.62 (tual machine monitors as a way of dealing with the) 54 276.33 B
(increasing complexity of modern computer systems.) 54 264.33 T
2 14 Q
(Acknowledgments) 54 223.17 T
1 10 Q
0.62 0.05 (The authors would like to thank John Chapin, John Gerth,) 54 204.83 B
0.62 0.77 (Mike Nelson, Rick Rashid, Steve Ofsthun, Volker) 54 192.83 B
-0.1 (Strumpen, and our shepherd Rich Draves for their feedback.) 54 180.83 P
0.62 0.29 (Our colleagues Kinshuk Govil, Dan Teodosiu, and Ben) 54 168.83 B
0.62 0.03 (Verghese participated in many lively discussions on Disco) 54 156.83 B
(and carefully read drafts of the paper.) 54 144.83 T
-0.06 (This study is part of the Stanford FLASH project, fund-) 72 132.83 P
-0.28 (ed by ARPA grant DABT63-94-C-0054. Ed Bugnion is sup-) 54 120.83 P
0.62 0.16 (ported in part by an NSF Graduate Research Fellowship.) 54 108.83 B
-0.04 (Mendel Rosenblum is partially supported by an NSF Young) 54 96.83 P
(Investigator Award.) 54 84.83 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(Refer) 317.78 728.67 T
(ences) 350.94 728.67 T
1 10 Q
([1]) 317.78 706.33 T
4.45 (Michael J. Accetta, Robert V) 335.78 706.33 P
4.45 (. Baron, W) 468.93 706.33 P
4.45 (illiam J.) 521.32 706.33 P
1.66 (Bolosky) 335.78 694.33 P
1.66 (, David B. Golub, Richard F) 368.47 694.33 P
1.66 (. Rashid, A) 489.31 694.33 P
1.66 (vadis) 536.89 694.33 P
0.21 (T) 335.78 682.33 P
0.21 (evananian, and Michael Y) 341.19 682.33 P
0.21 (oung. Mach: A New Kernel) 445.79 682.33 P
0.85 (Foundation for UNIX development. In) 335.78 670.33 P
0 F
0.85 (Pr) 497.25 670.33 P
0.85 (oceedings of) 506.88 670.33 P
1.1 (the Summer 86 USENIX Confer) 335.78 658.33 P
1.1 (ence) 467.02 658.33 P
1 F
1.1 (. pp. 99-1) 485.35 658.33 P
1.1 (12. Jun.) 525.51 658.33 P
(86.) 335.78 646.33 T
([2]) 317.78 626.33 T
0.9 (W) 335.78 626.33 P
0.9 (illiam J. Bolosky) 344.82 626.33 P
0.9 (, Robert P) 414.05 626.33 P
0.9 (. Fitzgerald, and Michael) 455.03 626.33 P
0.88 (L. Scott. Simple But Ef) 335.78 614.33 P
0.88 (fective T) 433.03 614.33 P
0.88 (echniques for NUMA) 469.03 614.33 P
-0.02 (Memory Management. In) 335.78 602.33 P
0 F
-0.02 (Pr) 440.69 602.33 P
-0.02 (oceedings of the 12th Sym-) 450.32 602.33 P
1.99 (posium on Operating Systems Principles \050SOSP\051) 335.78 590.33 P
1 F
1.99 (pp.) 545.5 590.33 P
(18-31. Dec. 1989.) 335.78 578.33 T
([3]) 317.78 558.33 T
0.88 (Thomas C. Bressoud and Fred B. Schneider) 335.78 558.33 P
0.88 (. Hypervi-) 516.02 558.33 P
1.72 (sor) 335.78 546.33 P
1.72 (-based Fault-tolerance. In) 347.8 546.33 P
0 F
1.72 (Pr) 457.93 546.33 P
1.72 (oceedings of the 15th) 467.56 546.33 P
1.56 (Symposium on Operating Systems Principles \050SOSP\051) 335.78 534.33 P
1 F
1.56 (.) 555.5 534.33 P
(pp. 1-1) 335.78 522.33 T
(1. Dec. 1995.) 363.74 522.33 T
([4]) 317.78 502.33 T
1.52 (T) 335.78 502.33 P
1.52 (ony Brewer and Greg Astfalk. The evolution of the) 341.19 502.33 P
1.52 (HP/Convex Exemplar) 335.78 490.33 P
1.52 (. In) 424.8 490.33 P
0 F
1.52 (Pr) 443.67 490.33 P
1.52 (oceedings of COMPCON) 453.3 490.33 P
(Spring \32497.) 335.78 478.33 T
1 F
( pp. 81-96. 1997) 380.78 478.33 T
([5]) 317.78 458.33 T
5.78 (John Chapin, Mendel Rosenblum, Scott Devine,) 335.78 458.33 P
2.36 (T) 335.78 446.33 P
2.36 (irthankar Lahiri, Dan T) 341.54 446.33 P
2.36 (eodosiu, and Anoop Gupta.) 441.22 446.33 P
0.84 (Hive: Fault containment for shared-memory Multipro-) 335.78 434.33 P
3.15 (cessors. In) 335.78 422.33 P
0 F
3.15 (Pr) 386.79 422.33 P
3.15 (oceedings of the 15th Symposium on) 396.42 422.33 P
0.65 (Operating Systems Principles \050SOSP\051,) 335.78 410.33 P
1 F
0.65 ( pp. 12-25. Dec.) 491.61 410.33 P
(1995.) 335.78 398.33 T
([6]) 317.78 378.33 T
0.96 (Thomas H. Cormen, Charles E. Leiserson and Ronald) 335.78 378.33 P
2.17 (L. Rivest. Introduction to Algorithms. McGraw-Hill.) 335.78 366.33 P
(1990.) 335.78 354.33 T
([7]) 317.78 334.33 T
0.04 (Alan L. Cox and Robert J. Fowler) 335.78 334.33 P
0.04 (. The Implementation) 471.55 334.33 P
0.14 (of a Coherent Memory Abstraction on a NUMA Multi-) 335.78 322.33 P
1.08 (processor: Experiences with Platinum. In) 335.78 310.33 P
0 F
1.08 (Pr) 508.38 310.33 P
1.08 (oceedings) 518.01 310.33 P
1.47 (of the 12th Symposium on Operating Systems Princi-) 335.78 298.33 P
(ples \050SOSP\051,) 335.78 286.33 T
1 F
( pp. 32-44. Dec. 1989.) 386.88 286.33 T
([8]) 317.78 266.33 T
0.72 (R. J. Creasy) 335.78 266.33 P
0.72 (. The Origin of the VM/370 T) 384.89 266.33 P
0.72 (ime-Sharing) 508.56 266.33 P
(System.) 335.78 254.33 T
0 F
(IBM J. Res. Develop) 370.23 254.33 T
1 F
(25\0505\051 pp. 483-490, 1981.) 455.2 254.33 T
([9]) 317.78 234.33 T
2.46 (Helen Custer) 335.78 234.33 P
2.46 (. Inside W) 390.18 234.33 P
2.46 (indows NT) 436.08 234.33 P
2.46 (. Microsoft Press.) 482.53 234.33 P
(1993.) 335.78 222.33 T
([10]) 317.78 202.33 T
5.9 (Kermal Ebcioglu and Erik R. Altman. DAISY) 335.78 202.33 P
5.9 (:) 555.22 202.33 P
0.06 (Dynamic Compilation for 100% Architectural Compat-) 335.78 190.33 P
0.07 (ibility) 335.78 178.33 P
0.07 (. In) 359.03 178.33 P
0 F
0.07 (Pr) 374.99 178.33 P
0.07 (oceedings of the 24th International Sympo-) 384.62 178.33 P
0.23 (sium on Computer Ar) 335.78 166.33 P
0.23 (chitectur) 422.48 166.33 P
0.23 (e \050ISCA\051) 457.66 166.33 P
1 F
0.23 (. pp. 26-37. Jun.) 492.6 166.33 P
(1997.) 335.78 154.33 T
([1) 317.78 134.33 T
(1]) 325.74 134.33 T
0.25 (Dawson R. Engler) 335.78 134.33 P
0.25 (, M. Frans Kaashoek, and J. O\325T) 409.47 134.33 P
0.25 (oole) 540.78 134.33 P
1.81 (Jr) 335.78 122.33 P
1.81 (. Exokernel: An Operating System Architecture for) 342.45 122.33 P
1.43 (Application-level Resource Management. In) 335.78 110.33 P
0 F
1.43 (Pr) 521.72 110.33 P
1.43 (oceed-) 531.35 110.33 P
-0.21 (ings of the 15th Symposium on Operating Systems Prin-) 335.78 98.33 P
(ciples \050SOSP\051) 335.78 86.33 T
1 F
( pp. 251-266. Dec. 1995.) 391.6 86.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
504 36 559.67 49 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Page 18) 522 42.33 T
54.53 34.86 493.44 48.27 R
7 X
V
0 X
(Disco: Running Commodity Operating Systems on Scalable Multipr) 72.53 41.6 T
(ocessors) 344.09 41.6 T
54 750.5 558 768.5 R
7 X
V
0 X
(Pr) 72 761.83 T
(oceedings of the 16th Symposium on Operating Systems Principles \050SOSP\051. Saint-Malo, France. October 1997.) 81.63 761.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
([12]) 54 731.33 T
1.94 (Bryan Ford, Mike Hibler) 72 731.33 P
1.94 (, Jay Lepreau, Patrick T) 177.4 731.33 P
1.94 (ull-) 280.33 731.33 P
1.23 (mann, Godmar Back, Stephen Clawson. Microkernels) 72 719.33 P
2.16 (meet Recursive V) 72 707.33 P
2.16 (irtual Machines. In) 147.37 707.33 P
0 F
2.16 (Pr) 232.16 707.33 P
2.16 (oceedings of) 241.79 707.33 P
1.39 (the 2nd Symposium on Operating System Design and) 72 695.33 P
(Implementation \050OSDI\051) 72 683.33 T
1 F
(. pp. 137-151. Oct. 1996.) 166.7 683.33 T
([13]) 54 663.33 T
5.6 (Robert P) 72 663.33 P
5.6 (. Goldber) 111.77 663.33 P
5.6 (g. Survey of V) 154.95 663.33 P
5.6 (irtual Machine) 230.02 663.33 P
1.58 (Research.) 72 651.33 P
0 F
1.58 (IEEE Computer Magazine) 115.23 651.33 P
1 F
1.58 (7\0506\051, pp. 34-45,) 228.57 651.33 P
(Jun. 1974.) 72 639.33 T
([14]) 54 619.33 T
2.13 (Maurice Herlihy) 72 619.33 P
2.13 (. W) 139.85 619.33 P
2.13 (ait-free synchronization. In) 155.63 619.33 P
0 F
2.13 (ACM) 273.11 619.33 P
0.35 (T) 72 607.33 P
0.35 (ransactions on Pr) 77.01 607.33 P
0.35 (ogramming Languages and Systems) 149.01 607.33 P
(\050T) 72 595.33 T
(OPLAS\051) 80.71 595.33 T
1 F
(13\0501\051 pp. 124-149. Jan. 1991.) 116.54 595.33 T
([15]) 54 575.33 T
0.43 (IBM Corporation. IBM V) 72 575.33 P
0.43 (irtual Machine /370 Planning) 176.01 575.33 P
(Guide. 1972.) 72 563.33 T
([16]) 54 543.33 T
3.17 (Adrian King. Inside W) 72 543.33 P
3.17 (indows 95, Microsoft Press,) 172.77 543.33 P
(1995.) 72 531.33 T
([17]) 54 511.33 T
0.35 (Jef) 72 511.33 P
0.35 (frey Kuskin, David Ofelt, Mark Heinrich, John Hei-) 83.48 511.33 P
2.67 (nlein, Richard Simoni, Kourosh Gharachorloo, John) 72 499.33 P
0.91 (Chapin, David Nakahira, Joel Baxter) 72 487.33 P
0.91 (, Mark Horowitz,) 222.98 487.33 P
0.06 (Anoop Gupta, Mendel Rosenblum, and John Hennessy) 72 475.33 P
0.06 (.) 291.72 475.33 P
1.52 (The Stanford FLASH Multiprocessor) 72 463.33 P
1.52 (. In) 225.73 463.33 P
0 F
1.52 (Pr) 244.6 463.33 P
1.52 (oceedings) 254.23 463.33 P
3.7 (of the 21st International Symposium on Computer) 72 451.33 P
(Ar) 72 439.33 T
(chitectur) 81.63 439.33 T
(e \050ISCA\051) 116.81 439.33 T
1 F
(, pp. 302-313, Apr) 151.52 439.33 T
(. 1994.) 224.85 439.33 T
([18]) 54 419.33 T
1.7 (Jim Laudon and Daniel Lenoski. The SGI Origin: A) 72 419.33 P
2.06 (ccNUMA Highly Scalable Server) 72 407.33 P
2.06 (. In) 212.32 407.33 P
0 F
2.06 (Pr) 232.26 407.33 P
2.06 (oceedings of) 241.89 407.33 P
0.62 (the 24th International Symposium on Computer Ar) 72 395.33 P
0.62 (chi-) 278.67 395.33 P
(tectur) 72 383.33 T
(e \050ISCA\051) 94.96 383.33 T
1 F
(. pp. 241-251. Jun. 1997.) 129.67 383.33 T
([19]) 54 363.33 T
1.02 (T) 72 363.33 P
1.02 (om Lovett and Russel Clapp. ST) 77.41 363.33 P
1.02 (iNG: A CC-NUMA) 212.74 363.33 P
0.61 (Computer System for the Commercial Marketplace. In) 72 351.33 P
0 F
1.79 (Pr) 72 339.33 P
1.79 (oceedings of the 23r) 81.63 339.33 P
1.79 (d International Symposium on) 168.02 339.33 P
-0.29 (Computer Ar) 72 327.33 P
-0.29 (chitectur) 123.84 327.33 P
-0.29 (e \050ISCA\051) 159.02 327.33 P
1 F
-0.29 (. pp. 308-317. Jun. 1996.) 193.44 327.33 P
([20]) 54 307.33 T
0.51 (Mike Perez, Compaq Corporation. Interview \322Scalable) 72 307.33 P
1.91 (hardware evolves, but what about the network OS?\323) 72 295.33 P
(PCW) 72 283.33 T
(eek. Dec. 1995.) 92.87 283.33 T
([21]) 54 263.33 T
1.34 (Sharon E. Perl and Richard L. Sites. Studies of W) 72 263.33 P
1.34 (in-) 283.11 263.33 P
2.33 (dows NT using Dynamic Execution T) 72 251.33 P
2.33 (races. In) 235.23 251.33 P
0 F
2.33 (Pr) 276.26 251.33 P
2.33 (o-) 285.89 251.33 P
1.47 (ceedings of the 2nd Symposium on Operating System) 72 239.33 P
0.65 (Design and Implementation \050OSDI\051) 72 227.33 P
1 F
0.65 (, pp. 169-183. Oct.) 216.99 227.33 P
(1996.) 72 215.33 T
([22]) 54 195.33 T
2.17 (Mendel Rosenblum, Edouard Bugnion, Scott Devine) 72 195.33 P
0.8 (and Steve Herrod. Using the SimOS Machine Simula-) 72 183.33 P
0.63 (tor to study Complex Computer Systems,) 72 171.33 P
0 F
0.63 (ACM T) 243.86 171.33 P
0.63 (rans-) 273.11 171.33 P
6.28 (actions on Modelling and Computer Simulation) 72 159.33 P
(\050T) 72 147.33 T
(OMACS\051) 80.71 147.33 T
1 F
(, 7\0501\051, pp. 78-103. Jan. 1997.) 117.37 147.33 T
([23]) 54 127.33 T
0.42 (Mendel Rosenblum, Edouard Bugnion, Steven A. Her-) 72 127.33 P
0.4 (rod, Emmett W) 72 115.33 P
0.4 (itchel and Anoop Gupta. The Impact of) 134.34 115.33 P
0.04 (Architectural T) 72 103.33 P
0.04 (ends on Operating System Performance.) 132.71 103.33 P
1.76 (In) 72 91.33 P
0 F
1.76 (Pr) 84.59 91.33 P
1.76 (oceedings of the 15th Symposium on Operating) 94.22 91.33 P
(Systems Principles \050SOSP\051) 72 79.33 T
1 F
(, pp. 285-298. Dec. 1995.) 179.76 79.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
([24]) 317.78 731.33 T
3.95 (Lance Shuler) 335.78 731.33 P
3.95 (, Chu Jong, Rolf Riesen, David van) 392.37 731.33 P
0.94 (Dresser) 335.78 719.33 P
0.94 (, A. B. Maccabe, L.A. Fisk and T) 365.92 719.33 P
0.94 (.M. Stallcup.) 505.39 719.33 P
2.69 (The Puma Operating System for Massively Parallel) 335.78 707.33 P
0.64 (Computers. In) 335.78 695.33 P
0 F
0.64 (Pr) 396.77 695.33 P
0.64 (oceedings of the Intel Super) 406.4 695.33 P
0.64 (computer) 520.23 695.33 P
(User Gr) 335.78 683.33 T
(oup Confer) 368.46 683.33 T
(ence,) 413.37 683.33 T
1 F
( 1995.) 434.19 683.33 T
([25]) 317.78 663.33 T
4.33 (Ron Unrau, Orran Krieger) 335.78 663.33 P
4.33 (, Benjamin Gamsa and) 453.9 663.33 P
1.56 (Michael Stumm. Hierarchical Clustering: A Structure) 335.78 651.33 P
0.67 (for Scalable Multiprocessor Operating System Design.) 335.78 639.33 P
0 F
(Journal of Super) 335.78 627.33 T
(computing) 402.63 627.33 T
1 F
(, 9\0501\051, pp. 105-134. 1995.) 444.85 627.33 T
([26]) 317.78 607.33 T
-0.21 (Ben V) 335.78 607.33 P
-0.21 (er) 360.29 607.33 P
-0.21 (ghese, Scott Devine, Anoop Gupta, and Mendel) 367.88 607.33 P
1.33 (Rosenblum. Operating System Support for Improving) 335.78 595.33 P
-0.02 (Data Locality on CC-NUMA Compute Servers. In) 335.78 583.33 P
0 F
-0.02 (Pr) 540.04 583.33 P
-0.02 (o-) 549.67 583.33 P
0.47 (ceedings of the 7th International Confer) 335.78 571.33 P
0.47 (ence on Ar) 498.57 571.33 P
0.47 (chi-) 542.45 571.33 P
4.13 (tectural Support for Pr) 335.78 559.33 P
4.13 (ogramming Languages and) 439.74 559.33 P
(Operating Systems \050ASPLOS\051) 335.78 547.33 T
1 F
(, pp. 279-289. Oct. 1996.) 455.21 547.33 T
([27]) 317.78 527.33 T
1.04 (Steven Cameron W) 335.78 527.33 P
1.04 (oo, Moriyoshi Ohara, Evan T) 415.39 527.33 P
1.04 (orrie,) 536.62 527.33 P
0.2 (Jaswinder Pal Singh, and Anoop Gupta. The SPLASH-) 335.78 515.33 P
0.06 (2 programs: Characterization and Methodological Con-) 335.78 503.33 P
0.69 (siderations. In) 335.78 491.33 P
0 F
0.69 (Pr) 396.32 491.33 P
0.69 (oceeedings of the 22nd Annual Inter-) 405.95 491.33 P
0.26 (national Symposium on Computer Ar) 335.78 479.33 P
0.26 (chitectur) 485.35 479.33 P
0.26 (e \050ISCA\051) 520.53 479.33 P
1 F
0.26 (,) 555.5 479.33 P
(pp. 24-36. May 1995.) 335.78 467.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 18
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%+ Times-Bold
%%+ Symbol
%%EOF
